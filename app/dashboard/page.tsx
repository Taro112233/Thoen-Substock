// app/dashboard/page.tsx - ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ token sync ‡∏´‡∏•‡∏±‡∏á login
'use client';

import { useCurrentUser } from '@/lib/client-auth';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { useEffect, useState } from 'react';
import { 
  User, 
  Building2, 
  Shield, 
  Settings, 
  BarChart, 
  Users, 
  Package, 
  LogOut,
  UserCheck,
  Activity,
  AlertTriangle,
  Clock,
  Lock,
  RefreshCw,
  CheckCircle
} from 'lucide-react';

export default function DashboardPage() {
  const { user, loading, error, logout, isAdmin, forceRefresh } = useCurrentUser();
  const [showLoginRedirect, setShowLoginRedirect] = useState(false);
  const [countdown, setCountdown] = useState(5); // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á
  const [isRefreshing, setIsRefreshing] = useState(false);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh auth state (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà token ‡∏°‡∏µ‡πÅ‡∏ï‡πà state ‡πÑ‡∏°‡πà sync)
  const refreshAuthState = async () => {
    setIsRefreshing(true);
    try {
      await forceRefresh();
    } catch (err) {
      console.error('Refresh error:', err);
    } finally {
      setIsRefreshing(false);
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ countdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login redirect
  useEffect(() => {
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ loading ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ error ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏° countdown
    if (!loading && !error && !user) {
      setShowLoginRedirect(true);
      
      const countdownInterval = setInterval(() => {
        setCountdown((prev) => {
          if (prev <= 1) {
            clearInterval(countdownInterval);
            window.location.href = '/auth/login';
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(countdownInterval);
    }
  }, [loading, error, user]);

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ redirect ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ login ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏à‡∏≤‡∏Å URL params)
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const fromLogin = urlParams.get('from') === 'login';
    
    if (fromLogin && !user && !loading) {
      // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ redirect ‡∏à‡∏≤‡∏Å login ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á fetch user ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ -> ‡∏•‡∏≠‡∏á force refresh
      console.log('üîç [DEBUG] Detected redirect from login but no user, force refreshing...');
      setTimeout(refreshAuthState, 1000);
    }
  }, [user, loading]);

  if (loading || isRefreshing) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="text-center p-8">
          <div className="relative">
            <div className="animate-spin w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-6"></div>
            <div className="absolute inset-0 w-12 h-12 border-4 border-blue-200 rounded-full mx-auto"></div>
          </div>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">
            {isRefreshing ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Ç‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...' : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
          </h2>
          <p className="text-gray-600">
            {isRefreshing ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...' : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...'}
          </p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-pink-100">
        <div className="text-center p-8 max-w-md">
          <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg">
            <AlertTriangle className="w-10 h-10 text-red-600" />
          </div>
          <h2 className="text-2xl font-bold text-red-800 mb-4">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
          <p className="text-red-600 mb-6 text-lg leading-relaxed">{error}</p>
          <div className="space-y-3">
            <Button 
              onClick={refreshAuthState}
              className="bg-red-600 hover:bg-red-700 text-white px-6 py-2"
              disabled={isRefreshing}
            >
              {isRefreshing ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä...
                </>
              ) : (
                <>
                  <RefreshCw className="w-4 h-4 mr-2" />
                  ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                </>
              )}
            </Button>
            <Button 
              variant="outline" 
              onClick={() => window.location.href = '/auth/login'}
              className="w-full"
            >
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </Button>
          </div>
        </div>
      </div>
    );
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á countdown redirect
  if (!user && showLoginRedirect) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-amber-100">
        <div className="text-center p-8 max-w-lg">
          <div className="relative mb-8">
            <div className="w-24 h-24 bg-gradient-to-r from-orange-400 to-amber-500 rounded-full flex items-center justify-center mx-auto shadow-xl">
              <Lock className="w-12 h-12 text-white" />
            </div>
            <div className="absolute -bottom-2 -right-2 w-8 h-8 bg-red-500 rounded-full flex items-center justify-center">
              <Clock className="w-4 h-4 text-white" />
            </div>
          </div>
          
          <h2 className="text-3xl font-bold text-gray-800 mb-4">‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>
          <p className="text-gray-600 mb-6 text-lg leading-relaxed">
            ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô
          </p>
          
          <div className="bg-white rounded-lg p-6 shadow-lg mb-6">
            <div className="text-6xl font-bold text-orange-500 mb-2">{countdown}</div>
            <p className="text-gray-600">‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</p>
          </div>

          <div className="space-y-3">
            <Button 
              onClick={() => window.location.href = '/auth/login'}
              className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 text-lg font-medium"
            >
              ‡πÑ‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏¢
            </Button>
            <Button 
              variant="outline"
              onClick={refreshAuthState}
              className="w-full"
              disabled={isRefreshing}
            >
              {isRefreshing ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...
                </>
              ) : (
                <>
                  <RefreshCw className="w-4 h-4 mr-2" />
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                </>
              )}
            </Button>
            <p className="text-sm text-gray-500">
              ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            </p>
          </div>
        </div>
      </div>
    );
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° countdown (‡∏Å‡∏£‡∏ì‡∏µ loading ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ user)
  if (!user) {
    window.location.href = '/auth/login';
    return null;
  }

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏™‡∏î‡∏á authenticated dashboard
  const roleTranslations = {
    HOSPITAL_ADMIN: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
    PHARMACY_MANAGER: '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°',
    SENIOR_PHARMACIST: '‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™',
    STAFF_PHARMACIST: '‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥',
    DEPARTMENT_HEAD: '‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å',
    STAFF_NURSE: '‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥',
    PHARMACY_TECHNICIAN: '‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°'
  };

  const getRoleColor = (role: string) => {
    const colors = {
      HOSPITAL_ADMIN: 'from-red-500 to-pink-600',
      PHARMACY_MANAGER: 'from-purple-500 to-indigo-600',
      SENIOR_PHARMACIST: 'from-blue-500 to-cyan-600',
      STAFF_PHARMACIST: 'from-indigo-500 to-purple-600',
      DEPARTMENT_HEAD: 'from-green-500 to-emerald-600',
      STAFF_NURSE: 'from-teal-500 to-green-600',
      PHARMACY_TECHNICIAN: 'from-orange-500 to-red-600'
    };
    return colors[role as keyof typeof colors] || 'from-gray-500 to-gray-600';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* Success notification ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö */}
      {typeof window !== 'undefined' && new URLSearchParams(window.location.search).get('from') === 'login' && (
        <div className="fixed top-4 right-4 z-50">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 shadow-lg">
            <div className="flex items-center space-x-2">
              <CheckCircle className="w-5 h-5 text-green-600" />
              <span className="text-green-800 font-medium">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</span>
            </div>
          </div>
        </div>
      )}

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Welcome Section */}
        <div className="mb-8">
          <div className={`bg-gradient-to-r ${getRoleColor(user.role)} rounded-lg p-6 text-white`}>
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-2xl font-bold mb-2">
                  {roleTranslations[user.role as keyof typeof roleTranslations] || user.role}
                </h2>
                <p className="text-white/90">
                  ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
                </p>
                <p className="text-white/80 text-sm mt-1">
                  ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {user.name}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö</p>
                  <p className="text-2xl font-bold text-green-600">‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</p>
                </div>
                <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                  <Activity className="w-6 h-6 text-green-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</p>
                  <p className="text-2xl font-bold text-blue-600">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <Shield className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</p>
                  <p className="text-2xl font-bold text-purple-600">‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</p>
                </div>
                <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                  <Building2 className="w-6 h-6 text-purple-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
                  <p className="text-2xl font-bold text-orange-600">‡∏û‡∏£‡πâ‡∏≠‡∏°</p>
                </div>
                <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                  <Package className="w-6 h-6 text-orange-600" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* User Info & Actions */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* User Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <User className="w-5 h-5" />
                <span>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-3">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏ä‡∏∑‡πà‡∏≠:</span>
                    <span className="font-medium">{user.name}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</span>
                    <span className="font-medium">{user.email}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:</span>
                    <Badge className="bg-indigo-100 text-indigo-800 border-indigo-200">
                      {roleTranslations[user.role as keyof typeof roleTranslations] || user.role}
                    </Badge>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•:</span>
                    <span className="font-medium">{user.hospital?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
                  </div>
                  {user.department && (
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">‡πÅ‡∏ú‡∏ô‡∏Å:</span>
                      <span className="font-medium">{user.department.name}</span>
                    </div>
                  )}
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
                    <Badge className="bg-green-100 text-green-800 border-green-200">
                      ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
                    </Badge>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Settings className="w-5 h-5" />
                <span>‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πà‡∏ß‡∏ô</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {isAdmin && (
                  <>
                    <Button 
                      className="w-full justify-start bg-red-600 hover:bg-red-700 text-white"
                      onClick={() => window.location.href = '/admin/users/pending'}
                    >
                      <UserCheck className="w-4 h-4 mr-2" />
                      ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                    </Button>
                    
                    <Button 
                      className="w-full justify-start"
                      variant="outline"
                      onClick={() => window.location.href = '/admin'}
                    >
                      <Shield className="w-4 h-4 mr-2" />
                      ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö
                    </Button>
                  </>
                )}

                <Button 
                  className="w-full justify-start"
                  variant="outline"
                  onClick={() => window.location.href = '/pharmacy'}
                >
                  <Package className="w-4 h-4 mr-2" />
                  ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏¢‡∏≤
                </Button>

                <Button 
                  className="w-full justify-start"
                  variant="outline"
                  onClick={() => window.location.href = '/reports'}
                >
                  <BarChart className="w-4 h-4 mr-2" />
                  ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                </Button>

                {user.role === 'DEPARTMENT_HEAD' || user.role === 'STAFF_NURSE' ? (
                  <Button 
                    className="w-full justify-start"
                    variant="outline"
                    onClick={() => window.location.href = '/requisition'}
                  >
                    <Package className="w-4 h-4 mr-2" />
                    ‡πÄ‡∏ö‡∏¥‡∏Å‡∏¢‡∏≤
                  </Button>
                ) : null}
                
                {/* Debug Button for Development */}
                {process.env.NODE_ENV === 'development' && (
                  <Button 
                    className="w-full justify-start bg-gray-100 hover:bg-gray-200 text-gray-600"
                    variant="outline"
                    onClick={refreshAuthState}
                    disabled={isRefreshing}
                  >
                    {isRefreshing ? (
                      <>
                        <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä...
                      </>
                    ) : (
                      <>
                        <RefreshCw className="w-4 h-4 mr-2" />
                        Force Refresh Auth (Dev)
                      </>
                    )}
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* System Status */}
        <div className="mt-8">
          <Card>
            <CardHeader>
              <CardTitle>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="flex items-center space-x-3">
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span className="text-sm">‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span className="text-sm">‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span className="text-sm">‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}