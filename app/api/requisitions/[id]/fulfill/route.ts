// app/api/requisitions/[id]/fulfill/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { validateAuth } from '@/lib/auth-middleware';
import { z } from 'zod';

const prisma = new PrismaClient();

// Fulfillment schema
const fulfillmentSchema = z.object({
  items: z.array(z.object({
    itemId: z.string(),
    dispensedQuantity: z.number().min(0, '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0'),
    batchId: z.string().optional(),
    lotNumber: z.string().optional(),
    expiryDate: z.string().optional(),
    dispenserNotes: z.string().optional()
  })).min(1, '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'),
  fulfillerComments: z.string().optional(),
  isPartialFulfillment: z.boolean().default(false)
});

// POST - ‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏ï‡∏≤‡∏°‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üíä [REQUISITION FULFILLMENT API] Processing fulfillment for:', params.id);
    
    // Validate authentication
    const authResult = await validateAuth(request);
    if (!authResult.success) {
      return NextResponse.json({ error: authResult.error }, { status: 401 });
    }

    const { user } = authResult;
    const body = await request.json();
    
    // Validate input
    const validationResult = fulfillmentSchema.safeParse(body);
    if (!validationResult.success) {
      return NextResponse.json(
        { 
          error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 
          details: validationResult.error.issues 
        },
        { status: 400 }
      );
    }

    const { items, fulfillerComments, isPartialFulfillment } = validationResult.data;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤
    if (!['PHARMACY_MANAGER', 'SENIOR_PHARMACIST', 'STAFF_PHARMACIST'].includes(user.role)) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤' },
        { status: 403 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const existingRequisition = await prisma.requisition.findFirst({
      where: {
        id: params.id,
        hospitalId: user.hospitalId
      },
      include: {
        items: {
          include: {
            drug: {
              select: {
                id: true,
                name: true,
                hospitalDrugCode: true,
                unit: true,
                isControlled: true,
                isDangerous: true,
                unitCost: true
              }
            }
          }
        },
        requester: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true
          }
        },
        requestingDepartment: {
          select: {
            id: true,
            name: true
          }
        },
        fulfillmentWarehouse: {
          select: {
            id: true,
            name: true,
            type: true
          }
        }
      }
    });

    if (!existingRequisition) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' },
        { status: 404 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    if (!['APPROVED', 'PARTIALLY_FILLED'].includes(existingRequisition.status)) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ' },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ items ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingItemIds = existingRequisition.items.map(item => item.id);
    const requestedItemIds = items.map(item => item.itemId);
    
    const invalidItems = requestedItemIds.filter(id => !existingItemIds.includes(id));
    if (invalidItems.length > 0) {
      return NextResponse.json(
        { error: '‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å' },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    let quantityValidationErrors: string[] = [];
    for (const fulfillmentItem of items) {
      const requisitionItem = existingRequisition.items.find(item => item.id === fulfillmentItem.itemId);
      if (!requisitionItem) continue;

      const remainingToDispense = requisitionItem.approvedQuantity - requisitionItem.dispensedQuantity;
      if (fulfillmentItem.dispensedQuantity > remainingToDispense) {
        quantityValidationErrors.push(
          `${requisitionItem.drug.name}: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${remainingToDispense}, ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡πà‡∏≤‡∏¢: ${fulfillmentItem.dispensedQuantity})`
        );
      }
    }

    if (quantityValidationErrors.length > 0) {
      return NextResponse.json(
        { 
          error: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          details: quantityValidationErrors
        },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stock ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á
    let stockValidationErrors: string[] = [];
    for (const fulfillmentItem of items) {
      const requisitionItem = existingRequisition.items.find(item => item.id === fulfillmentItem.itemId);
      if (!requisitionItem || fulfillmentItem.dispensedQuantity === 0) continue;

      const stockCard = await prisma.stockCard.findFirst({
        where: {
          drugId: requisitionItem.drugId,
          warehouseId: existingRequisition.fulfillmentWarehouseId,
          hospitalId: user.hospitalId
        }
      });

      if (!stockCard || stockCard.currentStock < fulfillmentItem.dispensedQuantity) {
        stockValidationErrors.push(
          `${requisitionItem.drug.name}: ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${stockCard?.currentStock || 0}, ‡∏à‡πà‡∏≤‡∏¢: ${fulfillmentItem.dispensedQuantity})`
        );
      }
    }

    if (stockValidationErrors.length > 0) {
      return NextResponse.json(
        { 
          error: '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤',
          details: stockValidationErrors
        },
        { status: 400 }
      );
    }

    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤
    const result = await prisma.$transaction(async (tx) => {
      const now = new Date();
      let totalDispensedValue = 0;

      // ‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      for (const fulfillmentItem of items) {
        const requisitionItem = existingRequisition.items.find(item => item.id === fulfillmentItem.itemId);
        if (!requisitionItem || fulfillmentItem.dispensedQuantity === 0) continue;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô requisition item
        await tx.requisitionItem.update({
          where: { id: fulfillmentItem.itemId },
          data: {
            dispensedQuantity: {
              increment: fulfillmentItem.dispensedQuantity
            },
            dispensedAt: now,
            dispenserNotes: fulfillmentItem.dispenserNotes,
            batchId: fulfillmentItem.batchId
          }
        });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock card
        const stockCard = await tx.stockCard.findFirst({
          where: {
            drugId: requisitionItem.drugId,
            warehouseId: existingRequisition.fulfillmentWarehouseId
          }
        });

        if (stockCard) {
          await tx.stockCard.update({
            where: { id: stockCard.id },
            data: {
              currentStock: {
                decrement: fulfillmentItem.dispensedQuantity
              },
              reservedStock: {
                decrement: Math.min(fulfillmentItem.dispensedQuantity, stockCard.reservedStock)
              },
              lastUpdated: now
            }
          });

          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤
          const itemValue = stockCard.averageCost * fulfillmentItem.dispensedQuantity;
          totalDispensedValue += itemValue;

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å stock transaction
          await tx.stockTransaction.create({
            data: {
              hospitalId: user.hospitalId,
              warehouseId: existingRequisition.fulfillmentWarehouseId,
              drugId: requisitionItem.drugId,
              stockCardId: stockCard.id,
              transactionType: 'DISPENSE',
              quantity: -fulfillmentItem.dispensedQuantity, // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
              unitCost: stockCard.averageCost,
              totalCost: itemValue,
              stockBefore: stockCard.currentStock + fulfillmentItem.dispensedQuantity,
              stockAfter: stockCard.currentStock,
              referenceDocument: existingRequisition.requisitionNumber,
              referenceId: existingRequisition.id,
              notes: `‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏ï‡∏≤‡∏°‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å: ${existingRequisition.requisitionNumber} ‡πÉ‡∏´‡πâ ${existingRequisition.requestingDepartment.name}`,
              performedBy: user.userId,
              performedAt: now,
              toWarehouseId: existingRequisition.requestingDepartmentId // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ department warehouse
            }
          });

          // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ reserved stock ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
          await tx.stockTransaction.create({
            data: {
              hospitalId: user.hospitalId,
              warehouseId: existingRequisition.fulfillmentWarehouseId,
              drugId: requisitionItem.drugId,
              stockCardId: stockCard.id,
              transactionType: 'UNRESERVE',
              quantity: fulfillmentItem.dispensedQuantity,
              unitCost: stockCard.averageCost,
              totalCost: 0,
              stockBefore: stockCard.currentStock,
              stockAfter: stockCard.currentStock,
              referenceDocument: existingRequisition.requisitionNumber,
              referenceId: existingRequisition.id,
              notes: `‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å: ${existingRequisition.requisitionNumber}`,
              performedBy: user.userId,
              performedAt: now
            }
          });

          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
          if (requisitionItem.drug.isControlled) {
            // TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô controlled substance log
          }
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const updatedItems = await tx.requisitionItem.findMany({
        where: { requisitionId: params.id }
      });

      const isFullyFulfilled = updatedItems.every(item => 
        item.dispensedQuantity >= item.approvedQuantity
      );

      const hasAnyDispensed = updatedItems.some(item => 
        item.dispensedQuantity > 0
      );

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
      let newStatus = existingRequisition.status;
      if (isFullyFulfilled) {
        newStatus = 'COMPLETED';
      } else if (hasAnyDispensed || isPartialFulfillment) {
        newStatus = 'PARTIALLY_FILLED';
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å
      const updatedRequisition = await tx.requisition.update({
        where: { id: params.id },
        data: {
          status: newStatus,
          fulfillerId: user.userId,
          fulfilledDate: isFullyFulfilled ? now : null,
          fulfillerComments,
          fulfillerSignedAt: now,
          totalDispensedValue: {
            increment: totalDispensedValue
          }
        }
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å workflow log
      await tx.requisitionWorkflow.create({
        data: {
          requisitionId: params.id,
          fromStatus: existingRequisition.status,
          toStatus: newStatus,
          actionBy: user.userId,
          actionAt: now,
          comments: fulfillerComments,
          actionType: isFullyFulfilled ? 'COMPLETE' : 'PARTIAL_FULFILL'
        }
      });

      return { 
        action: isFullyFulfilled ? 'completed' : 'partially_fulfilled', 
        requisition: updatedRequisition,
        dispensedValue: totalDispensedValue 
      };
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    try {
      // TODO: Implement notification system
      // await sendNotification({
      //   type: result.action === 'completed' ? 'REQUISITION_COMPLETED' : 'REQUISITION_PARTIALLY_FULFILLED',
      //   recipientId: existingRequisition.requesterId,
      //   title: result.action === 'completed' ? '‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : '‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      //   message: `‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å ${existingRequisition.requisitionNumber} ${result.action === 'completed' ? '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' : '‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô'}‡πÅ‡∏•‡πâ‡∏ß`,
      //   data: { requisitionId: params.id }
      // });
    } catch (notificationError) {
      console.log('Notification error:', notificationError);
    }

    console.log(`‚úÖ [REQUISITION FULFILLMENT API] ${result.action}: ${params.id}`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
    const updatedRequisition = await prisma.requisition.findUnique({
      where: { id: params.id },
      include: {
        requester: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            role: true,
            email: true
          }
        },
        approver: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            role: true,
            email: true
          }
        },
        fulfiller: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            role: true,
            email: true
          }
        },
        requestingDepartment: {
          select: {
            id: true,
            name: true,
            code: true
          }
        },
        fulfillmentWarehouse: {
          select: {
            id: true,
            name: true,
            type: true
          }
        },
        items: {
          include: {
            drug: {
              select: {
                id: true,
                hospitalDrugCode: true,
                name: true,
                genericName: true,
                dosageForm: true,
                strength: true,
                unit: true,
                isControlled: true,
                isDangerous: true,
                isHighAlert: true
              }
            },
            dispensedBatch: {
              select: {
                id: true,
                batchNumber: true,
                expiryDate: true,
                manufacturerName: true
              }
            }
          },
          orderBy: {
            lineNumber: 'asc'
          }
        }
      }
    });

    return NextResponse.json({
      success: true,
      message: result.action === 'completed' 
        ? '‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'
        : '‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡πà‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á',
      data: updatedRequisition,
      action: result.action,
      totalDispensedValue: result.dispensedValue
    });

  } catch (error) {
    console.error('‚ùå [REQUISITION FULFILLMENT API] Error:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}