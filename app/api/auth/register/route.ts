// app/api/auth/register/route.ts - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç username field
import { NextRequest, NextResponse } from "next/server";
import { registerSchema } from "@/lib/validations/auth";
import { PrismaClient } from "@prisma/client";
import { hashPassword } from "@/lib/password-utils";
import { ZodError } from "zod";

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üîç [DEBUG] Registration request body:', body);
    
    const validatedData = registerSchema.parse(body);
    console.log('üîç [DEBUG] Validated data:', validatedData);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email ‡∏ã‡πâ‡∏≥
    const existingUser = await prisma.user.findUnique({
      where: { email: validatedData.email },
    });
    
    if (existingUser) {
      return NextResponse.json(
        { error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" },
        { status: 400 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡∏ã‡πâ‡∏≥ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ)
    const existingUsername = await prisma.user.findUnique({
      where: { username: validatedData.username },
    });
    
    if (existingUsername) {
      return NextResponse.json(
        { error: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" },
        { status: 400 }
      );
    }
    
    // Hash password
    const hashedPassword = await hashPassword(validatedData.password);
    console.log('üîç [DEBUG] Password hashed successfully');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÇ‡∏î‡∏¢‡πÉ‡∏™‡πà field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    const user = await prisma.user.create({
      data: {
        email: validatedData.email,
        name: validatedData.username, // ‡πÉ‡∏ä‡πâ username ‡πÄ‡∏õ‡πá‡∏ô display name ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        username: validatedData.username, // ‡πÄ‡∏û‡∏¥‡πà‡∏° field username ‡∏ó‡∏µ‡πà required
        password: hashedPassword, // ‡πÄ‡∏û‡∏¥‡πà‡∏° password field
        emailVerified: false,
        role: "STAFF_PHARMACIST", // ‡πÉ‡∏ä‡πâ Role ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô enum ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ó‡∏ô "User"
        status: "PENDING", // ‡πÄ‡∏û‡∏¥‡πà‡∏° status ‡∏ï‡∏≤‡∏° schema
        hospitalId: validatedData.hospitalId, // ‡πÄ‡∏û‡∏¥‡πà‡∏° hospitalId ‡∏ó‡∏µ‡πà required
        isProfileComplete: false, // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ô‡∏µ‡πâ
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    });
    
    console.log('üîç [DEBUG] User created successfully:', user.id);
    
    return NextResponse.json({
      success: true,
      message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
      userId: user.id,
      nextStep: "profile-completion", // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
    });
    
  } catch (error) {
    console.error("Registration error:", error);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏à‡∏≤‡∏Å Prisma
    if (error instanceof ZodError) {
      return NextResponse.json(
        { 
          error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 
          details: error.issues.map(issue => ({
            field: issue.path.join('.'),
            message: issue.message
          }))
        },
        { status: 400 }
      );
    }
    
    // Prisma unique constraint error
    if (error.code === 'P2002') {
      const target = error.meta?.target;
      if (target?.includes('email')) {
        return NextResponse.json(
          { error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" },
          { status: 400 }
        );
      }
      if (target?.includes('username')) {
        return NextResponse.json(
          { error: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" },
          { status: 400 }
        );
      }
    }
    
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}