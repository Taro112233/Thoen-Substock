// app/api/admin/drugs/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { validateAdminAuth } from '@/lib/auth-middleware';
import { z } from 'zod';

const prisma = new PrismaClient();

// Enhanced validation schema - ‡πÄ‡∏û‡∏¥‡πà‡∏° name field
const createDrugSchema = z.object({
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  hospitalDrugCode: z.string().min(1, '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô').max(20, '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'),
  genericName: z.string().min(1, '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
  brandName: z.string().optional(),
  name: z.string().min(1, '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'), // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ô‡∏µ‡πâ
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°
  strength: z.string().min(1, '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏¢‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
  dosageForm: z.enum([
    'TABLET', 'CAPSULE', 'INJECTION', 'SYRUP', 'CREAM', 'OINTMENT',
    'DROPS', 'SPRAY', 'SUPPOSITORY', 'PATCH', 'POWDER', 'SOLUTION', 'OTHER'
  ]),
  unitOfMeasure: z.string().min(1, '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏î‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
  
  // ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  therapeuticClass: z.string().min(1, '‡∏´‡∏°‡∏ß‡∏î‡∏¢‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
  pharmacologicalClass: z.string().optional(),
  // drugCategoryId: z.string().uuid().optional(), // ‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
  isControlled: z.boolean().default(false),
  controlledLevel: z.enum(['NONE', 'CATEGORY_1', 'CATEGORY_2', 'CATEGORY_3', 'CATEGORY_4', 'CATEGORY_5']).default('NONE'),
  isDangerous: z.boolean().default(false),
  isHighAlert: z.boolean().default(false),
  isFormulary: z.boolean().default(true),
  requiresPrescription: z.boolean().default(true),
  
  // ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤
  storageCondition: z.string().default('‡∏õ‡∏Å‡∏ï‡∏¥'),
  requiresColdStorage: z.boolean().default(false),
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å
  indications: z.string().optional(),
  contraindications: z.string().optional(),
  sideEffects: z.string().optional(),
  dosageInstructions: z.string().optional(),
  precautions: z.string().optional(),
  warnings: z.string().optional(),
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
  standardCost: z.number().min(0, '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ß‡∏Å'),
  currentCost: z.number().min(0, '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ß‡∏Å'),
  reorderPoint: z.number().int().min(0, '‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ö‡∏ß‡∏Å'),
  maxStockLevel: z.number().int().min(1, '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0'),
  notes: z.string().optional(),
});

// ===============================
// GET - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤
// ===============================
export async function GET(request: NextRequest) {
  console.log('üîç [DRUGS API] Starting GET request...');
  
  try {
    // Validate authentication
    const authResult = await validateAdminAuth(request);
    if ('error' in authResult) {
      return NextResponse.json({ error: authResult.error }, { status: authResult.status });
    }
    
    const { hospitalId } = authResult;
    const { searchParams } = new URL(request.url);
    
    // Parse query parameters
    const queryParams = {
      search: searchParams.get('search'),
      categoryId: searchParams.get('categoryId'),
      dosageForm: searchParams.get('dosageForm'),
      isControlled: searchParams.get('isControlled'),
      isFormulary: searchParams.get('isFormulary'),
      active: searchParams.get('active'),
      sortBy: searchParams.get('sortBy') || 'genericName',
      sortOrder: searchParams.get('sortOrder') || 'asc',
      page: parseInt(searchParams.get('page') || '1'),
      limit: parseInt(searchParams.get('limit') || '20'),
    };
    
    console.log('üîç [DRUGS API] Query params:', queryParams);
    
    // Build where clause
    const where: any = {
      hospitalId,
    };
    
    // Add filters
    if (queryParams.search) {
      where.OR = [
        { genericName: { contains: queryParams.search, mode: 'insensitive' } },
        { brandName: { contains: queryParams.search, mode: 'insensitive' } },
        { hospitalDrugCode: { contains: queryParams.search, mode: 'insensitive' } },
      ];
    }
    
    if (queryParams.categoryId) {
      where.drugCategoryId = queryParams.categoryId;
    }
    
    if (queryParams.dosageForm) {
      where.dosageForm = queryParams.dosageForm;
    }
    
    if (queryParams.isControlled !== null) {
      where.isControlled = queryParams.isControlled === 'true';
    }
    
    if (queryParams.isFormulary !== null) {
      where.isFormulary = queryParams.isFormulary === 'true';
    }
    
    if (queryParams.active !== null) {
      where.isActive = queryParams.active === 'true';
    }
    
    // Calculate pagination
    const skip = (queryParams.page - 1) * queryParams.limit;
    
    // Build orderBy
    const orderBy: any = {};
    orderBy[queryParams.sortBy] = queryParams.sortOrder;
    
    // Execute queries
    const [drugs, totalCount] = await Promise.all([
      prisma.drug.findMany({
        where,
        skip,
        take: queryParams.limit,
        orderBy,
        include: {
          _count: {
            select: {
              stockCards: true,
              stockTransactions: true,
            }
          }
        },
      }),
      prisma.drug.count({ where }),
    ]);
    
    console.log(`‚úÖ [DRUGS API] Found ${drugs.length} drugs (total: ${totalCount})`);
    
    // Calculate pagination metadata
    const totalPages = Math.ceil(totalCount / queryParams.limit);
    const hasNextPage = queryParams.page < totalPages;
    const hasPreviousPage = queryParams.page > 1;
    
    return NextResponse.json({
      success: true,
      data: drugs,
      pagination: {
        currentPage: queryParams.page,
        totalPages,
        totalCount,
        limit: queryParams.limit,
        hasNextPage,
        hasPreviousPage,
      },
      filters: queryParams,
    });
    
  } catch (error) {
    console.error('‚ùå [DRUGS API] GET Error:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// ===============================
// POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà
// ===============================
export async function POST(request: NextRequest) {
  console.log('üîç [DRUGS API] Starting POST request...');
  
  try {
    // Validate authentication
    const authResult = await validateAdminAuth(request);
    if ('error' in authResult) {
      return NextResponse.json({ error: authResult.error }, { status: authResult.status });
    }
    
    const { hospitalId } = authResult;
    
    // Parse request body
    const body = await request.json();
    console.log('üîç [DRUGS API] Request body keys:', Object.keys(body));
    
    // Validate input data
    const validatedData = createDrugSchema.parse(body);
    console.log('üîç [DRUGS API] Validated data:', {
      hospitalDrugCode: validatedData.hospitalDrugCode,
      genericName: validatedData.genericName,
      name: validatedData.name, // ‚≠ê ‡πÅ‡∏™‡∏î‡∏á name ‡∏î‡πâ‡∏ß‡∏¢
      dosageForm: validatedData.dosageForm
    });
    
    // Check for duplicate hospital drug code
    const existingDrug = await prisma.drug.findFirst({
      where: {
        hospitalId,
        hospitalDrugCode: validatedData.hospitalDrugCode,
      },
    });
    
    if (existingDrug) {
      return NextResponse.json(
        { error: `‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤ "${validatedData.hospitalDrugCode}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß` },
        { status: 400 }
      );
    }
    
    // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á name ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
    const drugName = validatedData.name || 
      (validatedData.brandName 
        ? `${validatedData.genericName} (${validatedData.brandName})`
        : validatedData.genericName);
    
    // Generate QR Code data
    const qrData = {
      hospitalId,
      drugCode: validatedData.hospitalDrugCode,
      type: 'DRUG',
      timestamp: new Date().toISOString(),
    };

    // Create new drug
    const newDrug = await prisma.drug.create({
      data: {
        ...validatedData,
        name: drugName, // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° name ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        hospitalId,
        qrCode: JSON.stringify(qrData),
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      include: {
        _count: {
          select: {
            stockCards: true,
            stockTransactions: true,
          }
        }
      }
    });

    console.log(`‚úÖ [DRUGS API] Created drug: ${newDrug.id} - ${newDrug.name}`);

    return NextResponse.json({
      success: true,
      data: newDrug,
      summary: {
        id: newDrug.id,
        code: newDrug.hospitalDrugCode,
        name: newDrug.name, // ‚≠ê ‡πÉ‡∏ä‡πâ name ‡∏à‡∏£‡∏¥‡∏á
        strengthDisplay: `${newDrug.strength} ${newDrug.unitOfMeasure}`,
      },
      message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ "${newDrug.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
    }, { status: 201 });

  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log('‚ùå [DRUGS API] Validation error:', error.errors);
      return NextResponse.json(
        { 
          error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          details: error.errors.map(err => ({
            field: err.path.join('.'),
            message: err.message,
          }))
        },
        { status: 400 }
      );
    }

    console.error('‚ùå [DRUGS API] POST Error:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}