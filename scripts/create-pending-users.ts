// scripts/create-pending-users.ts
// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (Complete Version)

// ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
import dotenv from 'dotenv';
import path from 'path';

// ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å .env.local
dotenv.config({ path: path.join(process.cwd(), '.env.local') });

import { PrismaClient } from '@prisma/client';
import crypto from 'crypto';

const prisma = new PrismaClient();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hash password ‡∏î‡πâ‡∏ß‡∏¢ crypto
function hashPassword(password: string): string {
  return crypto.createHash('sha256').update(password).digest('hex');
}

async function createPendingUsers() {
  try {
    console.log('üîç Checking environment variables...');
    console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Loaded' : '‚ùå Missing');
    console.log('DIRECT_URL:', process.env.DIRECT_URL ? '‚úÖ Loaded' : '‚ùå Missing');
    
    if (!process.env.DATABASE_URL) {
      throw new Error('DATABASE_URL environment variable is required');
    }

    console.log('üîç Looking for hospital and departments...');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hospital ‡πÅ‡∏•‡∏∞ department
    const hospital = await prisma.hospital.findFirst({
      where: { hospitalCode: 'DEMO_HOSPITAL' }
    });

    if (!hospital) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• DEMO_HOSPITAL');
      console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ...');
      
      const hospitals = await prisma.hospital.findMany({
        select: { id: true, name: true, hospitalCode: true }
      });
      
      console.log('üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö:', hospitals);
      
      if (hospitals.length === 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÉ‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏Å‡πà‡∏≠‡∏ô');
      }
      
      // ‡πÉ‡∏ä‡πâ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
      const firstHospital = hospitals[0];
      console.log(`üìç ‡πÉ‡∏ä‡πâ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: ${firstHospital.name} (${firstHospital.hospitalCode})`);
      
      await createPendingUsersForHospital(firstHospital.id);
      return;
    }

    await createPendingUsersForHospital(hospital.id);

  } catch (error) {
    console.error('‚ùå Error:', error);
    
    if (error instanceof Error && error.message.includes('Environment variable not found')) {
      console.log('\nüí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
      console.log('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .env.local ‡πÉ‡∏ô root directory');
      console.log('2. ‡πÉ‡∏™‡πà DATABASE_URL ‡πÅ‡∏•‡∏∞ DIRECT_URL');
      console.log('3. ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô: DATABASE_URL="your-url" npx tsx scripts/create-pending-users.ts');
    }
  } finally {
    await prisma.$disconnect();
  }
}

async function createPendingUsersForHospital(hospitalId: string) {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
    const departments = await prisma.department.findMany({
      where: { hospitalId },
      select: { id: true, name: true, departmentCode: true }
    });

    console.log('üè¢ ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö:', departments.map(d => `${d.name} (${d.departmentCode})`));

    const pharmacy = departments.find(d => d.departmentCode === 'PHARMACY') || departments[0];
    const internalMed = departments.find(d => d.departmentCode === 'INTERNAL_MED') || departments[1] || departments[0];

    if (!pharmacy) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô');
    }

    console.log('üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    const pendingUsers = [
      {
        name: '‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
        email: 'somchai@demo-hospital.th',
        username: 'somchai2025',
        password: hashPassword('password123'),
        role: 'STAFF_PHARMACIST' as const,
        employeeId: 'PH2025001',
        phoneNumber: '081-234-5678',
        position: '‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥',
        hospitalId: hospitalId,
        departmentId: pharmacy.id,
        status: 'PENDING' as const,
        isProfileComplete: true
      },
      {
        name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏°‡∏≤‡∏ô‡∏µ ‡∏£‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        email: 'manee@demo-hospital.th',
        username: 'manee2025',
        password: hashPassword('password123'),
        role: 'STAFF_NURSE' as const,
        employeeId: 'NS2025001',
        phoneNumber: '081-345-6789',
        position: '‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥',
        hospitalId: hospitalId,
        departmentId: internalMed.id,
        status: 'PENDING' as const,
        isProfileComplete: true
      },
      {
        name: '‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å',
        email: 'wichai@demo-hospital.th',
        username: 'wichai2025',
        password: hashPassword('password123'),
        role: 'PHARMACY_TECHNICIAN' as const,
        employeeId: 'PT2025001',
        phoneNumber: '081-456-7890',
        position: '‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°',
        hospitalId: hospitalId,
        departmentId: pharmacy.id,
        status: 'PENDING' as const,
        isProfileComplete: true
      }
    ];

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for (const userData of pendingUsers) {
      try {
        const existingUser = await prisma.user.findUnique({
          where: { email: userData.email }
        });

        if (!existingUser) {
          await prisma.user.create({
            data: userData
          });
          console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userData.name} (${userData.email}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } else {
          console.log(`‚ö†Ô∏è  ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userData.email} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
        }
      } catch (userError) {
        console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userData.name}:`, userError);
      }
    }

    console.log('\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('- Email: somchai@demo-hospital.th, Password: password123');
    console.log('- Email: manee@demo-hospital.th, Password: password123');
    console.log('- Email: wichai@demo-hospital.th, Password: password123');
    console.log('\nüîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà: http://localhost:3000/admin/users/pending');
    console.log('üîë Login ‡∏î‡πâ‡∏ß‡∏¢: admin@demo-hospital.th / admin123');

  } catch (error) {
    console.error('‚ùå Error in createPendingUsersForHospital:', error);
    throw error;
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function
createPendingUsers();