// scripts/merge-seeds.js - Updated for Bulk Drugs Support
const fs = require('fs');
const path = require('path');

const SEEDS_DIR = path.join(__dirname, '../prisma/seeds');
const OUTPUT_FILE = path.join(__dirname, '../prisma/seed.ts');

const SEED_ORDER = {
  'hospitals.seed.ts': 0,
  'personnel-types.seed.ts': 1,
  'departments.seed.ts': 2,
  'users.seed.ts': 3,
  'master-data.seed.ts': 4,
  'real-drugs.seed.ts': 5, // รองรับทั้ง seedRealDrugs และ seedBulkRealDrugs
  'bulk-real-drugs.seed.ts': 5, // Alternative file name
  'demo-data.seed.ts': 6,
};

function extractExportedFunction(content, filename) {
  // Extract the main export function from each seed file
  const functionMatch = content.match(/export async function (\w+)\([^)]*\)\s*\{([\s\S]*)\}/);
  
  if (!functionMatch) {
    console.warn(`⚠️  No exported function found in ${filename}`);
    return null;
  }

  const functionName = functionMatch[1];
  const functionBody = functionMatch[2];
  
  return {
    name: functionName,
    body: functionBody.trim(),
    imports: extractImports(content)
  };
}

function extractImports(content) {
  const imports = [];
  const importRegex = /import\s+.*?from\s+['"](.*?)['"];?\s*$/gm;
  let match;
  
  while ((match = importRegex.exec(content)) !== null) {
    const importPath = match[1];
    if (!importPath.startsWith('@prisma/client') && !importPath.startsWith('../lib/')) {
      imports.push(match[0].trim());
    }
  }
  
  return imports;
}

function mergeSeeds() {
  console.log('🌱 Hospital Pharmacy Seed Merger v2.1 - Enhanced for Bulk Drugs');
  console.log('====================================================================');
  
  if (!fs.existsSync(SEEDS_DIR)) {
    console.error(`❌ Seeds directory not found: ${SEEDS_DIR}`);
    process.exit(1);
  }

  const seedFiles = fs.readdirSync(SEEDS_DIR)
    .filter(file => file.endsWith('.seed.ts'))
    .sort((a, b) => {
      const orderA = SEED_ORDER[a] ?? 999;
      const orderB = SEED_ORDER[b] ?? 999;
      return orderA - orderB;
    });

  if (seedFiles.length === 0) {
    console.error('❌ No .seed.ts files found in seeds directory');
    process.exit(1);
  }

  console.log(`📁 Found ${seedFiles.length} seed files:`);
  seedFiles.forEach((file, index) => {
    const order = SEED_ORDER[file] ?? 999;
    console.log(`  ${order + 1}. ${file}`);
  });

  const extractedFunctions = [];
  const allImports = new Set();

  // Extract functions from each seed file
  for (const file of seedFiles) {
    const filePath = path.join(SEEDS_DIR, file);
    const content = fs.readFileSync(filePath, 'utf8');
    
    console.log(`📖 Processing ${file}...`);
    
    const extracted = extractExportedFunction(content, file);
    if (extracted) {
      extractedFunctions.push(extracted);
      extracted.imports.forEach(imp => allImports.add(imp));
      console.log(`  ✅ Extracted function: ${extracted.name}`);
    }
  }

  // Generate merged seed file
  const mergedContent = generateMergedSeed(extractedFunctions, Array.from(allImports));
  
  // Write merged file
  fs.writeFileSync(OUTPUT_FILE, mergedContent, 'utf8');
  
  console.log(`\n✅ Successfully merged ${extractedFunctions.length} seed functions into: ${OUTPUT_FILE}`);
  console.log(`📦 Generated modular seed file with:`);
  console.log(`   - Main orchestrator function`);
  console.log(`   - ${extractedFunctions.length} imported seed functions`);
  console.log(`   - Proper error handling`);
  console.log(`   - Phase-based execution`);
  console.log(`   - Bulk drug processing support`);
  
  console.log(`\n📝 Usage:`);
  console.log(`   pnpm db:seed              # Run all seeds`);
  console.log(`   SEED_DEMO_DATA=true pnpm db:seed  # Include demo data`);
}

function generateMergedSeed(functions, imports) {
  const importStatements = [
    `// prisma/seed.ts - Auto-generated Modular Seed File`,
    `// Generated by scripts/merge-seeds.js`,
    `// Do not edit manually - modify individual seed files instead`,
    ``,
    `import { PrismaClient } from "@prisma/client";`,
    `import { hashPassword } from "../lib/password-utils";`,
    ``
  ];

  // Add function imports
  const functionImports = functions.map(f => `import { ${f.name} } from "./seeds/${getFileNameFromFunction(f.name)}";`);
  importStatements.push(...functionImports);
  importStatements.push('');

  // Detect if we have bulk drugs function
  const hasBulkDrugs = functions.some(f => f.name === 'seedBulkRealDrugs');
  const hasRegularDrugs = functions.some(f => f.name === 'seedRealDrugs');
  
  // Choose the appropriate drug seeding function
  const drugSeedFunction = hasBulkDrugs ? 'seedBulkRealDrugs' : 'seedRealDrugs';
  const drugSeedDescription = hasBulkDrugs ? 'bulk real drug data' : 'real drug data';

  const mainFunction = `const prisma = new PrismaClient();

async function main() {
  console.log("🌱 Starting Enhanced Hospital Pharmacy Stock Management System Seed...");
  console.log("🎯 Using Modular Seed Architecture with Neon + Prisma");
  ${hasBulkDrugs ? 'console.log("⚡ Enhanced with Bulk Drug Processing Support");' : ''}

  try {
    // ================================
    // PHASE 1: FOUNDATION
    // ================================
    console.log("\\n🏗️  PHASE 1: Foundation Setup");
    
    // 1. Create hospitals first
    const hospitals = await seedHospitals(prisma, null);
    console.log(\`✅ Created \${hospitals.length} hospitals\`);

    // 2. Create system developer with first hospital
    console.log("👤 Creating system developer user...");
    const hashedDevPassword = await hashPassword("dev123");
    const devUser = await prisma.user.upsert({
      where: { email: "dev@system.local" },
      update: {},
      create: {
        email: "dev@system.local",
        username: "developer",
        name: "System Developer",
        firstName: "System",
        lastName: "Developer", 
        phoneNumber: "0800000000",
        employeeId: "DEV001",
        position: "System Developer",
        role: "DEVELOPER",
        status: "ACTIVE",
        hospitalId: hospitals[0].id, // Use first hospital
        personnelTypeId: undefined, // Will be updated after personnel type creation
        isProfileComplete: true,
        emailVerified: true,
        password: hashedDevPassword,
      },
    });
    console.log("✅ System developer created");

    // ================================
    // PHASE 2: ORGANIZATIONAL STRUCTURE
    // ================================
    console.log("\\n🏢 PHASE 2: Organizational Structure");
    
    // 3. Create personnel types for all hospitals
    const personnelTypes = await seedPersonnelTypes(prisma, hospitals, devUser);
    console.log(\`✅ Created personnel types for all hospitals\`);

    // Update dev user with developer personnel type
    const devPersonnelType = personnelTypes[hospitals[0].id].find(pt => pt.typeCode === "DEV");
    await prisma.user.update({
      where: { id: devUser.id },
      data: { personnelTypeId: devPersonnelType?.id }
    });

    // 4. Create departments for all hospitals
    const departments = await seedDepartments(prisma, hospitals);
    console.log(\`✅ Created departments for all hospitals\`);

    // ================================
    // PHASE 3: PERSONNEL
    // ================================
    console.log("\\n👥 PHASE 3: Personnel Management");
    
    // 5. Create diverse users with proper role assignments
    const users = await seedUsers(prisma, hospitals, departments, personnelTypes);
    console.log(\`✅ Created \${users.length} users with role assignments\`);

    // ================================
    // PHASE 4: MASTER DATA
    // ================================
    console.log("\\n💊 PHASE 4: Master Data Setup");
    
    // 6. Create master data (drug forms, groups, types, etc.)
    const masterData = await seedMasterData(prisma, hospitals, devUser);
    console.log(\`✅ Created master data for all hospitals\`);

    // ================================
    // PHASE 5: DRUG DATA
    // ================================
    console.log("\\n💊 PHASE 5: Drug Data Processing");
    ${hasBulkDrugs ? 'console.log("⚡ Using optimized bulk processing for large datasets");' : ''}
    
    // Create drug data for Hospital 1
    const drugResult = await ${drugSeedFunction}(prisma, hospitals, masterData);
    ${hasBulkDrugs ? `
    console.log(\`✅ Bulk drug processing completed\`);
    if (drugResult && typeof drugResult === 'object' && drugResult.totalProcessed) {
      console.log(\`📊 Processed \${drugResult.totalProcessed} drugs\`);
      console.log(\`💰 Total value: \${drugResult.totalValue ? drugResult.totalValue.toLocaleString() : 'N/A'} บาท\`);
    } else {
      console.log(\`📊 Bulk processing completed successfully\`);
    }
    ` : `
    console.log(\`✅ Created \${Array.isArray(drugResult) ? drugResult.length : 'N/A'} real drugs for โรงพยาบาลลำปาง\`);
    `}

    // ================================
    // PHASE 6: DEMO DATA (Optional)
    // ================================
    console.log("\\n🎮 PHASE 6: Demo Data (Optional)");
    
    if (process.env.SEED_DEMO_DATA === "true") {
      const demoData = await seedDemoData(prisma, hospitals, users, masterData);
      console.log(\`✅ Created demo data for testing\`);
    } else {
      console.log("⏭️  Skipping demo data (set SEED_DEMO_DATA=true to include)");
    }

    // ================================
    // COMPLETION SUMMARY
    // ================================
    console.log("\\n🎉 Enhanced Hospital Pharmacy Seed Completed Successfully!");
    console.log("\\n📊 Summary:");
    console.log(\`🏥 Hospitals: \${hospitals.length}\`);
    console.log(\`👥 Personnel Types: \${Object.values(personnelTypes).flat().length}\`);
    console.log(\`🏢 Departments: \${Object.values(departments).flat().length}\`);
    console.log(\`👤 Users: \${users.length + 1} (including dev user)\`);
    console.log(\`💊 Master Data Categories: \${Object.keys(masterData).length}\`);
    ${hasBulkDrugs ? `
    if (drugResult && typeof drugResult === 'object' && drugResult.totalProcessed) {
      console.log(\`🏥 Bulk Drugs Processed: \${drugResult.totalProcessed}\`);
      console.log(\`💰 Total Drug Value: \${drugResult.totalValue ? drugResult.totalValue.toLocaleString() : 'N/A'} บาท\`);
      if (drugResult.categoriesCount) {
        console.log(\`📋 Drug Categories:\`);
        Object.entries(drugResult.categoriesCount).forEach(([category, count]) => {
          console.log(\`   - \${category}: \${count} drugs\`);
        });
      }
    } else {
      console.log(\`🏥 Bulk Drugs: Processing completed\`);
    }
    ` : `
    console.log(\`🏥 Real Drugs (โรงพยาบาลลำปาง): \${Array.isArray(drugResult) ? drugResult.length : 'N/A'}\`);
    `}
    
    console.log("\\n🔑 System Access:");
    console.log("🔧 DEVELOPER: dev@system.local / dev123");
    console.log("👨‍💼 DIRECTORS: director@[hospital].go.th / director123");
    console.log("⚕️  PHARMACY: pharm@[hospital].go.th / pharm123");
    console.log("👩‍⚕️ NURSING: nurse@[hospital].go.th / nurse123");
    
    console.log("\\n📝 Next Steps:");
    console.log("1. Run: pnpm dev");
    console.log("2. Login as dev@system.local / dev123");
    console.log("3. Test multi-tenant isolation");
    console.log("4. Verify role-based permissions");
    console.log("5. Check drug inventory and stock management");
    ${hasBulkDrugs ? 'console.log("6. Verify bulk drug processing performance");' : ''}

  } catch (error) {
    console.error("❌ Seed error:", error);
    throw error;
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("✅ Database connection closed successfully");
  })
  .catch(async (e) => {
    console.error("❌ Fatal seed error:", e);
    await prisma.$disconnect();
    process.exit(1);
  });

export { prisma };`;

  return [...importStatements, mainFunction].join('\n');
}

function getFileNameFromFunction(functionName) {
  const mapping = {
    'seedHospitals': 'hospitals.seed',
    'seedPersonnelTypes': 'personnel-types.seed',
    'seedDepartments': 'departments.seed',
    'seedUsers': 'users.seed',
    'seedMasterData': 'master-data.seed',
    'seedRealDrugs': 'real-drugs.seed',
    'seedBulkRealDrugs': 'real-drugs.seed', // Map to same file
    'seedDemoData': 'demo-data.seed'
  };
  
  return mapping[functionName] || `${functionName.toLowerCase()}.seed`;
}

function validateMerge() {
  console.log('🔍 Validating merged seed file...');
  
  if (!fs.existsSync(OUTPUT_FILE)) {
    console.error('❌ Merged seed file not found');
    return false;
  }
  
  const content = fs.readFileSync(OUTPUT_FILE, 'utf8');
  
  // Check for required imports
  const requiredImports = ['PrismaClient', 'hashPassword'];
  const missingImports = requiredImports.filter(imp => !content.includes(imp));
  
  if (missingImports.length > 0) {
    console.error(`❌ Missing required imports: ${missingImports.join(', ')}`);
    return false;
  }
  
  // Check for required function calls (flexible for both regular and bulk)
  const requiredBaseFunctions = ['seedHospitals', 'seedPersonnelTypes', 'seedDepartments', 'seedUsers', 'seedMasterData'];
  const drugFunctions = ['seedRealDrugs', 'seedBulkRealDrugs'];
  
  const missingBaseFunctions = requiredBaseFunctions.filter(func => !content.includes(`await ${func}(`));
  const hasDrugFunction = drugFunctions.some(func => content.includes(`await ${func}(`));
  
  if (missingBaseFunctions.length > 0) {
    console.error(`❌ Missing required function calls: ${missingBaseFunctions.join(', ')}`);
    return false;
  }
  
  if (!hasDrugFunction) {
    console.error(`❌ Missing drug seeding function (either seedRealDrugs or seedBulkRealDrugs)`);
    return false;
  }
  
  console.log('✅ Merged seed file validation passed');
  
  // Log which drug function is being used
  if (content.includes('seedBulkRealDrugs')) {
    console.log('🚀 Using bulk drug processing with smart defaults');
  } else {
    console.log('📦 Using regular drug processing function');
  }
  
  return true;
}

function showUsage() {
  console.log(`
🌱 Hospital Pharmacy Seed Merger v2.1 - Enhanced for Bulk Drugs

Usage:
  node scripts/merge-seeds.js [--check-only]

Options:
  --check-only    Only validate merged file without merging
  --help, -h      Show this help message

This script merges all .seed.ts files from prisma/seeds/ into prisma/seed.ts

🎯 Enhanced Features:
- ✅ Separate seed files for different concerns
- ✅ Automatic function extraction and imports  
- ✅ Phase-based execution order
- ✅ Hospital context management
- ✅ Personnel type hierarchy
- ✅ Master data initialization
- ✅ Optional demo data seeding
- 🚀 Bulk drug processing support (400+ drugs)
- ⚡ Smart detection of drug seeding functions
- 🛠️ Smart defaults for missing CSV data

📁 Seed files are processed in this order:
${Object.entries(SEED_ORDER)
  .sort(([, a], [, b]) => a - b)
  .map(([file, order]) => `  ${order + 1}. ${file}`)
  .join('\n')}

🔧 Supported Drug Seeding Functions:
  - seedRealDrugs: Regular drug processing (< 100 drugs)
  - seedBulkRealDrugs: Optimized bulk processing (400+ drugs)
    ✨ Auto-fixes missing data (strength, unit, prices)
    ✨ Handles malformed CSV (commas in numbers, wrong dates)
    ✨ Smart defaults based on dosage forms

After merging, run:
  pnpm db:seed                    # Run basic seed
  SEED_DEMO_DATA=true pnpm db:seed # Run with demo data
  pnpm db:reset && pnpm db:seed   # Full reset and seed
`);
}

// Main execution
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    showUsage();
    process.exit(0);
  }
  
  if (args.includes('--check-only')) {
    console.log('🔍 Running validation only...');
    if (validateMerge()) {
      console.log('✅ Validation passed');
      process.exit(0);
    } else {
      console.error('❌ Validation failed');
      process.exit(1);
    }
  }
  
  try {
    mergeSeeds();
    
    if (validateMerge()) {
      console.log(`
🎉 Hospital Pharmacy Seed merge completed successfully!

🎯 Enhanced Modular Seed Structure:
  - hospitals.seed.ts (Hospital creation)
  - personnel-types.seed.ts (Role hierarchy)
  - departments.seed.ts (Organizational structure)  
  - users.seed.ts (User accounts)
  - master-data.seed.ts (Drug forms, groups, etc.)
  - real-drugs.seed.ts (Drug data - regular or bulk processing)
  - demo-data.seed.ts (Sample data for testing)

🚀 Enhanced Features:
  ✅ Automatic detection of bulk vs regular drug processing
  ✅ Optimized for 400+ drug datasets with smart CSV handling
  ✅ Batch processing with transaction safety
  ✅ Progress tracking and error handling
  ✅ Comprehensive statistics reporting
  ✅ Smart data fixing for malformed CSV files
  ✅ Auto-generation of missing required fields

📋 Next Steps:
  1. Run: pnpm db:seed
  2. Test with: dev@system.local / dev123
  3. Check drug inventory (10+ or 400+ drugs)
  4. Verify multi-tenant isolation
  5. Check role-based permissions
  6. Test bulk processing performance
`);
    } else {
      console.error('❌ Merge completed but validation failed');
      process.exit(1);
    }
  } catch (error) {
    console.error('❌ Merge failed:', error.message);
    process.exit(1);
  }
}

module.exports = { mergeSeeds, validateMerge };