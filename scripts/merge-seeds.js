// scripts/merge-seeds.js - Final Version with Warehouse Parameter Support
const fs = require('fs');
const path = require('path');

const SEEDS_DIR = path.join(__dirname, '../prisma/seeds');
const OUTPUT_FILE = path.join(__dirname, '../prisma/seed.ts');

const SEED_ORDER = {
  'hospitals.seed.ts': 0,
  'personnel-types.seed.ts': 1,
  'departments.seed.ts': 2,
  'warehouses.seed.ts': 3, // ‡πÄ‡∏û‡∏¥‡πà‡∏° warehouse seed
  'users.seed.ts': 4,
  'master-data.seed.ts': 5,
  'real-drugs.seed.ts': 6,
  'bulk-real-drugs.seed.ts': 6,
  'robust-bulk-drugs.seed.ts': 6,
  'demo-data.seed.ts': 7,
};

function extractExportedFunction(content, filename) {
  const functionMatch = content.match(/export async function (\w+)\([^)]*\)\s*\{([\s\S]*)\}/);
  
  if (!functionMatch) {
    console.warn(`‚ö†Ô∏è  No exported function found in ${filename}`);
    return null;
  }

  const functionName = functionMatch[1];
  
  return {
    name: functionName,
    sourceFile: filename
  };
}

function mergeSeeds() {
  console.log('üå± Hospital Pharmacy Seed Merger v2.5 - Final Warehouse Integration');
  console.log('====================================================================');
  
  if (!fs.existsSync(SEEDS_DIR)) {
    console.error(`‚ùå Seeds directory not found: ${SEEDS_DIR}`);
    process.exit(1);
  }

  const seedFiles = fs.readdirSync(SEEDS_DIR)
    .filter(file => file.endsWith('.seed.ts'))
    .sort((a, b) => {
      const orderA = SEED_ORDER[a] ?? 999;
      const orderB = SEED_ORDER[b] ?? 999;
      return orderA - orderB;
    });

  if (seedFiles.length === 0) {
    console.error('‚ùå No .seed.ts files found in seeds directory');
    process.exit(1);
  }

  console.log(`üìÅ Found ${seedFiles.length} seed files:`);
  seedFiles.forEach((file, index) => {
    const order = SEED_ORDER[file] ?? 999;
    console.log(`  ${order + 1}. ${file}`);
  });

  const extractedFunctions = [];
  const seenFunctions = new Set();

  // Extract functions from each seed file
  for (const file of seedFiles) {
    const filePath = path.join(SEEDS_DIR, file);
    const content = fs.readFileSync(filePath, 'utf8');
    
    console.log(`üìñ Processing ${file}...`);
    
    const extracted = extractExportedFunction(content, file);
    if (extracted) {
      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô function ‡∏ã‡πâ‡∏≥ - ‡πÉ‡∏´‡πâ priority ‡∏ï‡∏≤‡∏° file order
      if (seenFunctions.has(extracted.name)) {
        console.log(`  ‚ö†Ô∏è  Skipping duplicate function: ${extracted.name} from ${file}`);
        continue;
      }
      
      extractedFunctions.push(extracted);
      seenFunctions.add(extracted.name);
      console.log(`  ‚úÖ Extracted function: ${extracted.name} from ${file}`);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ warehouse ‡πÅ‡∏•‡∏∞ drug seeding function ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const hasWarehouseFunction = extractedFunctions.some(f => f.name === 'seedWarehouses');
  const drugFunctions = extractedFunctions.filter(f => 
    f.name === 'seedRealDrugs' || f.name === 'seedBulkRealDrugs'
  );

  if (drugFunctions.length === 0) {
    console.error('‚ùå No drug seeding function found!');
    process.exit(1);
  }

  const selectedDrugFunction = drugFunctions[0];
  console.log(`\nüéØ Using drug function: ${selectedDrugFunction.name} from ${selectedDrugFunction.sourceFile}`);
  
  if (hasWarehouseFunction) {
    console.log(`üè™ Warehouse creation: ‚úÖ Enabled`);
  } else {
    console.log(`üè™ Warehouse creation: ‚ö†Ô∏è  Missing - will be auto-created`);
  }

  // Generate merged seed file
  const mergedContent = generateMergedSeed(extractedFunctions, selectedDrugFunction, hasWarehouseFunction);
  
  // Write merged file
  fs.writeFileSync(OUTPUT_FILE, mergedContent, 'utf8');
  
  console.log(`\n‚úÖ Successfully merged ${extractedFunctions.length} unique seed functions`);
  console.log(`üì¶ Generated seed file with enhanced warehouse support`);
}

function generateMergedSeed(functions, selectedDrugFunction, hasWarehouseFunction) {
  // Detect if we have bulk drugs function
  const hasBulkDrugs = selectedDrugFunction.name === 'seedBulkRealDrugs';
  
  // Create function imports
  const functionImports = functions.map(f => 
    `import { ${f.name} } from "./seeds/${getFileNameFromFunction(f.name)}";`
  ).join('\n');

  const seedContent = `// prisma/seed.ts - Auto-generated Modular Seed File
// Generated by scripts/merge-seeds.js v2.5 - Final Warehouse Integration
// Do not edit manually - modify individual seed files instead

import { PrismaClient } from "@prisma/client";
import { hashPassword } from "../lib/password-utils";

${functionImports}

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Starting Enhanced Hospital Pharmacy Stock Management System Seed...");
  console.log("üéØ Using Modular Seed Architecture with Neon + Prisma");
  ${hasBulkDrugs ? 'console.log("‚ö° Enhanced with Bulk Drug Processing Support v2.5");' : ''}
  ${hasWarehouseFunction ? 'console.log("üè™ Full warehouse management enabled");' : 'console.log("üè™ Basic warehouse auto-creation enabled");'}

  try {
    // ================================
    // PHASE 1: FOUNDATION
    // ================================
    console.log("\\nüèóÔ∏è  PHASE 1: Foundation Setup");
    
    // 1. Create hospitals first
    const hospitals = await seedHospitals(prisma, null);
    console.log(\`‚úÖ Created \${hospitals.length} hospitals\`);

    // 2. Create system developer with first hospital
    console.log("üë§ Creating system developer user...");
    const hashedDevPassword = await hashPassword("dev123");
    const devUser = await prisma.user.upsert({
      where: { email: "dev@system.local" },
      update: {},
      create: {
        email: "dev@system.local",
        username: "developer",
        name: "System Developer",
        firstName: "System",
        lastName: "Developer", 
        phoneNumber: "0800000000",
        employeeId: "DEV001",
        position: "System Developer",
        role: "DEVELOPER",
        status: "ACTIVE",
        hospitalId: hospitals[0].id,
        personnelTypeId: undefined,
        isProfileComplete: true,
        emailVerified: true,
        password: hashedDevPassword,
      },
    });
    console.log("‚úÖ System developer created");

    // ================================
    // PHASE 2: ORGANIZATIONAL STRUCTURE
    // ================================
    console.log("\\nüè¢ PHASE 2: Organizational Structure");
    
    // 3. Create personnel types for all hospitals
    const personnelTypes = await seedPersonnelTypes(prisma, hospitals, devUser);
    console.log(\`‚úÖ Created personnel types for all hospitals\`);

    // Update dev user with developer personnel type
    const devPersonnelType = personnelTypes[hospitals[0].id].find(pt => pt.typeCode === "DEV");
    await prisma.user.update({
      where: { id: devUser.id },
      data: { personnelTypeId: devPersonnelType?.id }
    });

    // 4. Create departments for all hospitals
    const departments = await seedDepartments(prisma, hospitals);
    console.log(\`‚úÖ Created departments for all hospitals\`);

    // ================================
    // PHASE 2.5: WAREHOUSE INFRASTRUCTURE
    // ================================
    console.log("\\nüè™ PHASE 2.5: Warehouse Infrastructure");
    
    ${hasWarehouseFunction ? `
    // 5. Create comprehensive warehouses for all hospitals
    const warehouses = await seedWarehouses(prisma, hospitals);
    console.log(\`‚úÖ Created comprehensive warehouses for all hospitals\`);
    ` : `
    // 5. Create basic main warehouse for drug processing
    console.log("üè™ Creating basic main warehouses...");
    const warehouses: Record<string, any[]> = {};
    
    for (const hospital of hospitals) {
      const mainWarehouse = await prisma.warehouse.upsert({
        where: {
          hospitalId_warehouseCode: {
            hospitalId: hospital.id,
            warehouseCode: "MAIN"
          }
        },
        update: {},
        create: {
          name: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏´‡∏•‡∏±‡∏Å",
          warehouseCode: "MAIN",
          type: "CENTRAL",
          location: "‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
          description: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
          capacity: 10000,
          isActive: true,
          hospitalId: hospital.id,
        }
      });
      warehouses[hospital.id] = [mainWarehouse];
      console.log(\`  ‚úÖ Main warehouse for \${hospital.name}\`);
    }
    console.log(\`‚úÖ Created basic warehouses for all hospitals\`);
    `}

    // ================================
    // PHASE 3: PERSONNEL
    // ================================
    console.log("\\nüë• PHASE 3: Personnel Management");
    
    // 6. Create diverse users with proper role assignments
    const users = await seedUsers(prisma, hospitals, departments, personnelTypes);
    console.log(\`‚úÖ Created \${users.length} users with role assignments\`);

    // ================================
    // PHASE 4: MASTER DATA
    // ================================
    console.log("\\nüíä PHASE 4: Master Data Setup");
    
    // 7. Create master data (drug forms, groups, types, etc.)
    const masterData = await seedMasterData(prisma, hospitals, devUser);
    console.log(\`‚úÖ Created master data for all hospitals\`);

    // ================================
    // PHASE 5: DRUG DATA PROCESSING
    // ================================
    console.log("\\nüíä PHASE 5: Drug Data Processing");
    ${hasBulkDrugs ? 'console.log("‚ö° Using enhanced bulk processing for 400+ drug dataset");' : ''}
    
    // Execute drug seeding with warehouse support
    console.log(\`üîÑ Starting ${selectedDrugFunction.name} function...\`);
    
    const drugResult = await ${selectedDrugFunction.name}(prisma, hospitals, masterData, warehouses);
    
    // Enhanced result handling
    if (drugResult && typeof drugResult === 'object') {
      // Handle bulk drug processing results
      if ('totalProcessed' in drugResult && 'totalValue' in drugResult) {
        console.log(\`‚úÖ Bulk drug processing completed successfully\`);
        console.log(\`üìä Total drugs processed: \${drugResult.totalProcessed || 0}\`);
        console.log(\`üí∞ Total inventory value: \${(drugResult.totalValue || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó\`);
        
        if (drugResult.warehouseUsed) {
          console.log(\`üè™ Primary warehouse: \${drugResult.warehouseUsed}\`);
        }
        
        if (drugResult.categoriesCount) {
          console.log(\`üìã Drug Categories Distribution:\`);
          Object.entries(drugResult.categoriesCount).forEach(([category, count]) => {
            console.log(\`   - \${category}: \${count} drugs\`);
          });
        }
      } else if (Array.isArray(drugResult)) {
        // Handle regular drug processing results (array)
        console.log(\`‚úÖ Regular drug processing completed\`);
        console.log(\`üìä Total drugs created: \${drugResult.length}\`);
      } else {
        console.log(\`‚úÖ Drug processing completed with custom result format\`);
      }
    } else {
      console.log(\`‚ö†Ô∏è  Drug processing completed but no valid result returned\`);
    }

    // ================================
    // PHASE 6: DEMO DATA (Optional)
    // ================================
    console.log("\\nüéÆ PHASE 6: Demo Data (Optional)");
    
    if (process.env.SEED_DEMO_DATA === "true") {
      const demoData = await seedDemoData(prisma, hospitals, users, masterData);
      console.log(\`‚úÖ Created demo data for testing\`);
    } else {
      console.log("‚è≠Ô∏è  Skipping demo data (set SEED_DEMO_DATA=true to include)");
    }

    // ================================
    // COMPLETION SUMMARY
    // ================================
    console.log("\\nüéâ Enhanced Hospital Pharmacy Seed Completed Successfully!");
    console.log("\\nüìä Final Summary:");
    console.log(\`üè• Hospitals: \${hospitals.length}\`);
    console.log(\`üë• Personnel Types: \${Object.values(personnelTypes).flat().length}\`);
    console.log(\`üè¢ Departments: \${Object.values(departments).flat().length}\`);
    console.log(\`üè™ Warehouses: \${Object.values(warehouses).flat().length}\`);
    console.log(\`üë§ Users: \${users.length + 1} (including dev user)\`);
    console.log(\`üíä Master Data Categories: \${Object.keys(masterData).length}\`);
    
    // Enhanced drug statistics
    if (drugResult && typeof drugResult === 'object' && 'totalProcessed' in drugResult) {
      console.log(\`üè• Bulk Drugs Processed: \${drugResult.totalProcessed || 0}\`);
      console.log(\`üí∞ Total Drug Inventory Value: \${(drugResult.totalValue || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó\`);
    } else if (Array.isArray(drugResult)) {
      console.log(\`üè• Regular Drugs Created: \${drugResult.length}\`);
    }
    
    console.log("\\nüîë System Access Credentials:");
    console.log("üîß DEVELOPER: dev@system.local / dev123");
    console.log("üë®‚Äçüíº DIRECTORS: director@[hospital].go.th / director123");
    console.log("‚öïÔ∏è  PHARMACY: pharm@[hospital].go.th / pharm123");
    console.log("üë©‚Äç‚öïÔ∏è NURSING: nurse@[hospital].go.th / nurse123");
    
    console.log("\\nüìù Next Steps:");
    console.log("1. Run: pnpm dev");
    console.log("2. Login as dev@system.local / dev123");
    console.log("3. Test multi-tenant isolation");
    console.log("4. Verify role-based permissions");
    console.log("5. Check drug inventory and stock management");
    ${hasBulkDrugs ? 'console.log("6. Verify 400+ drug bulk processing performance");' : ''}
    console.log("7. Test stock card creation and batch management");
    console.log("8. Verify warehouse management functionality");

  } catch (error) {
    console.error("‚ùå Seed error:", error);
    console.error("‚ùå Error details:", error.message);
    if (error.stack) {
      console.error("‚ùå Error stack:", error.stack);
    }
    throw error;
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("\\n‚úÖ Database connection closed successfully");
    console.log("üéâ Hospital Pharmacy Seed Process Completed!");
  })
  .catch(async (e) => {
    console.error("‚ùå Fatal seed error:", e);
    await prisma.$disconnect();
    process.exit(1);
  });

export { prisma };`;

  return seedContent;
}

function getFileNameFromFunction(functionName) {
  const mapping = {
    'seedHospitals': 'hospitals.seed',
    'seedPersonnelTypes': 'personnel-types.seed',
    'seedDepartments': 'departments.seed',
    'seedWarehouses': 'warehouses.seed',
    'seedUsers': 'users.seed',
    'seedMasterData': 'master-data.seed',
    'seedRealDrugs': 'real-drugs.seed',
    'seedBulkRealDrugs': 'robust-bulk-drugs.seed',
    'seedDemoData': 'demo-data.seed'
  };
  
  return mapping[functionName] || `${functionName.toLowerCase()}.seed`;
}

// Main execution
if (require.main === module) {
  try {
    mergeSeeds();
    console.log(`
üéâ Hospital Pharmacy Seed merge completed successfully!

‚ú® Enhanced Features v2.5:
  ‚úÖ Fixed template string variable substitution
  ‚úÖ Complete warehouse infrastructure support
  ‚úÖ Enhanced bulk drug processing (400+ drugs)
  ‚úÖ Warehouse parameter passing to drug functions
  ‚úÖ Auto-creation of main warehouses if missing
  ‚úÖ Comprehensive error handling

üè™ Warehouse Types Supported:
  ‚úÖ CENTRAL - ‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏´‡∏•‡∏±‡∏Å (Main Pharmacy)
  ‚úÖ DEPARTMENT - ‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏ú‡∏ô‡∏Å (Department Storage)  
  ‚úÖ EMERGENCY - ‡∏Ñ‡∏•‡∏±‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (Emergency Storage)
  ‚úÖ COLD_STORAGE - ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô (Cold Storage)
  ‚úÖ CONTROLLED - ‡∏´‡πâ‡∏≠‡∏á‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Controlled Drugs)
  ‚úÖ DISPENSING - ‡∏´‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤ (Dispensing Room)

üíä Drug Processing Features:
  ‚úÖ CSV file support with smart parsing
  ‚úÖ Auto-fix for malformed data
  ‚úÖ Batch processing for performance
  ‚úÖ Stock card and batch creation
  ‚úÖ Comprehensive statistics reporting

üìã Next Steps:
  1. Run: pnpm db:seed
  2. Check for 400+ drugs in main warehouses
  3. Verify stock cards and batches creation
  4. Test warehouse functionality
  5. Test system login and permissions
`);
  } catch (error) {
    console.error('‚ùå Merge failed:', error.message);
    process.exit(1);
  }
}

module.exports = { mergeSeeds };