// components/admin/drugs/drug-form.tsx - ‡πÄ‡∏û‡∏¥‡πà‡∏° name field
"use client";

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { toast } from 'sonner';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from '@/components/ui/form';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { 
  Pill, 
  Shield, 
  AlertTriangle, 
  Thermometer, 
  DollarSign,
  QrCode,
  Save,
  X,
  Info
} from 'lucide-react';

// Enhanced drug form schema - ‡πÄ‡∏û‡∏¥‡πà‡∏° name field
const drugFormSchema = z.object({
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  hospitalDrugCode: z.string().min(1, '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô').max(20, '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'),
  genericName: z.string().min(1, '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
  brandName: z.string().optional(),
  name: z.string().min(1, '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'), // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ô‡∏µ‡πâ
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°
  strength: z.string().min(1, '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏¢‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
  dosageForm: z.enum([
    'TABLET', 'CAPSULE', 'INJECTION', 'SYRUP', 'CREAM', 'OINTMENT',
    'DROPS', 'SPRAY', 'SUPPOSITORY', 'PATCH', 'POWDER', 'SOLUTION', 'OTHER'
  ]),
  unitOfMeasure: z.string().min(1, '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏î‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
  
  // ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  therapeuticClass: z.string().min(1, '‡∏´‡∏°‡∏ß‡∏î‡∏¢‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
  pharmacologicalClass: z.string().optional(),
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
  isControlled: z.boolean().default(false),
  controlledLevel: z.enum(['NONE', 'CATEGORY_1', 'CATEGORY_2', 'CATEGORY_3', 'CATEGORY_4', 'CATEGORY_5']).default('NONE'),
  isDangerous: z.boolean().default(false),
  isHighAlert: z.boolean().default(false),
  isFormulary: z.boolean().default(true),
  requiresPrescription: z.boolean().default(true),
  
  // ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤
  storageCondition: z.string().default('‡∏õ‡∏Å‡∏ï‡∏¥'),
  requiresColdStorage: z.boolean().default(false),
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å
  indications: z.string().optional(),
  contraindications: z.string().optional(),
  sideEffects: z.string().optional(),
  dosageInstructions: z.string().optional(),
  precautions: z.string().optional(),
  warnings: z.string().optional(),
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
  standardCost: z.number().min(0, '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ß‡∏Å'),
  currentCost: z.number().min(0, '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ß‡∏Å'),
  reorderPoint: z.number().int().min(0, '‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ö‡∏ß‡∏Å'),
  maxStockLevel: z.number().int().min(1, '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0'),
  notes: z.string().optional(),
});

type DrugFormData = z.infer<typeof drugFormSchema>;

const dosageFormOptions = [
  { value: 'TABLET', label: '‡πÄ‡∏°‡πá‡∏î (Tablet)' },
  { value: 'CAPSULE', label: '‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏• (Capsule)' },
  { value: 'INJECTION', label: '‡∏â‡∏µ‡∏î (Injection)' },
  { value: 'SYRUP', label: '‡∏ô‡πâ‡∏≥‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° (Syrup)' },
  { value: 'CREAM', label: '‡∏Ñ‡∏£‡∏µ‡∏° (Cream)' },
  { value: 'OINTMENT', label: '‡∏Ç‡∏µ‡πâ‡∏ú‡∏∂‡πâ‡∏á (Ointment)' },
  { value: 'DROPS', label: '‡∏´‡∏¢‡∏î (Drops)' },
  { value: 'SPRAY', label: '‡∏™‡πÄ‡∏õ‡∏£‡∏¢‡πå (Spray)' },
  { value: 'SUPPOSITORY', label: '‡∏•‡∏π‡∏Å‡∏õ‡∏∑‡∏ô (Suppository)' },
  { value: 'PATCH', label: '‡πÅ‡∏ú‡πà‡∏ô‡πÅ‡∏õ‡∏∞ (Patch)' },
  { value: 'POWDER', label: '‡∏ú‡∏á (Powder)' },
  { value: 'SOLUTION', label: '‡∏™‡∏≤‡∏£‡∏•‡∏∞‡∏•‡∏≤‡∏¢ (Solution)' },
  { value: 'OTHER', label: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ (Other)' },
];

const controlledLevelOptions = [
  { value: 'NONE', label: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°' },
  { value: 'CATEGORY_1', label: '‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 1' },
  { value: 'CATEGORY_2', label: '‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 2' },
  { value: 'CATEGORY_3', label: '‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 3' },
  { value: 'CATEGORY_4', label: '‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 4' },
  { value: 'CATEGORY_5', label: '‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 5' },
];

interface DrugFormProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSuccess?: () => void;
}

export function DrugForm({ open, onOpenChange, onSuccess }: DrugFormProps) {
  const [activeTab, setActiveTab] = useState('basic');
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm({
    resolver: zodResolver(drugFormSchema),
    defaultValues: {
      hospitalDrugCode: '',
      genericName: '',
      brandName: '',
      name: '', // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° default value
      strength: '',
      dosageForm: 'TABLET',
      unitOfMeasure: '',
      therapeuticClass: '',
      pharmacologicalClass: '',
      isControlled: false,
      controlledLevel: 'NONE',
      isDangerous: false,
      isHighAlert: false,
      isFormulary: true,
      requiresPrescription: true,
      storageCondition: '‡∏õ‡∏Å‡∏ï‡∏¥',
      requiresColdStorage: false,
      indications: '',
      contraindications: '',
      sideEffects: '',
      dosageInstructions: '',
      precautions: '',
      warnings: '',
      standardCost: 0,
      currentCost: 0,
      reorderPoint: 10,
      maxStockLevel: 1000,
      notes: '',
    },
  });

  const { watch, setValue } = form;
  const watchedGenericName = watch('genericName');
  const watchedBrandName = watch('brandName');

  // ‚≠ê Auto-generate name ‡πÄ‡∏°‡∏∑‡πà‡∏≠ genericName ‡∏´‡∏£‡∏∑‡∏≠ brandName ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  React.useEffect(() => {
    if (watchedGenericName) {
      const autoName = watchedBrandName 
        ? `${watchedGenericName} (${watchedBrandName})`
        : watchedGenericName;
      setValue('name', autoName);
    }
  }, [watchedGenericName, watchedBrandName, setValue]);

  const onSubmit = async (data: any) => {
    setIsLoading(true);
    
    try {
      console.log('üöÄ [DRUG FORM] Submitting data:', data);
      
      const response = await fetch('/api/admin/drugs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        if (result.details) {
          // ‡πÅ‡∏™‡∏î‡∏á validation errors
          result.details.forEach((detail: any) => {
            form.setError(detail.field as any, {
              type: 'server',
              message: detail.message,
            });
          });
        }
        throw new Error(result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }

      toast.success(result.message || '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      form.reset();
      onOpenChange(false);
      onSuccess?.();

    } catch (error: any) {
      console.error('‚ùå [DRUG FORM] Submit error:', error);
      toast.error(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancel = () => {
    form.reset();
    setActiveTab('basic');
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Pill className="h-5 w-5 text-blue-600" />
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà
          </DialogTitle>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-5">
                <TabsTrigger value="basic">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</TabsTrigger>
                <TabsTrigger value="classification">‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å</TabsTrigger>
                <TabsTrigger value="clinical">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å</TabsTrigger>
                <TabsTrigger value="inventory">‡∏Ñ‡∏•‡∏±‡∏á/‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô</TabsTrigger>
                <TabsTrigger value="preview">QR Preview</TabsTrigger>
              </TabsList>

              {/* Tab 1: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
              <TabsContent value="basic" className="space-y-4 max-h-[50vh] overflow-y-auto">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤</CardTitle>
                    <CardDescription>
                      ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="hospitalDrugCode"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• *</FormLabel>
                            <FormControl>
                              <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô TAB001, INJ177" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="dosageForm"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤ *</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {dosageFormOptions.map((option) => (
                                  <SelectItem key={option.value} value={option.value}>
                                    {option.label}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <FormField
                      control={form.control}
                      name="genericName"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç (Generic Name) *</FormLabel>
                          <FormControl>
                            <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô Paracetamol, Diazepam" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="brandName"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ (Brand Name)</FormLabel>
                          <FormControl>
                            <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô Tylenol, Valium" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    {/* ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° name field ‡∏ó‡∏µ‡πà auto-generate */}
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö *</FormLabel>
                          <FormControl>
                            <Input placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" {...field} />
                          </FormControl>
                          <FormDescription>
                            ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className="grid grid-cols-3 gap-4">
                      <FormField
                        control={form.control}
                        name="strength"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á *</FormLabel>
                            <FormControl>
                              <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô 500, 10" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="unitOfMeasure"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏î *</FormLabel>
                            <FormControl>
                              <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô mg, g, ml" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="therapeuticClass"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏´‡∏°‡∏ß‡∏î‡∏¢‡∏≤ *</FormLabel>
                            <FormControl>
                              <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô Analgesics, Antibiotics" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <FormField
                      control={form.control}
                      name="pharmacologicalClass"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤</FormLabel>
                          <FormControl>
                            <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô NSAIDs, Beta-lactam antibiotics" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Tab 2: ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å */}
              <TabsContent value="classification" className="space-y-4 max-h-[50vh] overflow-y-auto">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center gap-2">
                      <Shield className="h-5 w-5" />
                      ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤
                    </CardTitle>
                    <CardDescription>
                      ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    {/* ‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */}
                    <div className="space-y-4">
                      <FormField
                        control={form.control}
                        name="isControlled"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                            <div className="space-y-0.5">
                              <FormLabel className="text-base">‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°</FormLabel>
                              <FormDescription>
                                ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢
                              </FormDescription>
                            </div>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />

                      {watch('isControlled') && (
                        <FormField
                          control={form.control}
                          name="controlledLevel"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°</FormLabel>
                              <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {controlledLevelOptions.map((option) => (
                                    <SelectItem key={option.value} value={option.value}>
                                      {option.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      )}
                    </div>

                    <Separator />

                    {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ */}
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="isDangerous"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                            <div className="space-y-0.5">
                              <FormLabel className="text-base flex items-center gap-2">
                                <AlertTriangle className="h-4 w-4 text-orange-500" />
                                ‡∏¢‡∏≤‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
                              </FormLabel>
                              <FormDescription>
                                ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á
                              </FormDescription>
                            </div>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="isHighAlert"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                            <div className="space-y-0.5">
                              <FormLabel className="text-base flex items-center gap-2">
                                <AlertTriangle className="h-4 w-4 text-red-500" />
                                High Alert
                              </FormLabel>
                              <FormDescription>
                                ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏™‡∏π‡∏á
                              </FormDescription>
                            </div>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="isFormulary"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                            <div className="space-y-0.5">
                              <FormLabel className="text-base">‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏≤</FormLabel>
                              <FormDescription>
                                ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
                              </FormDescription>
                            </div>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="requiresPrescription"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                            <div className="space-y-0.5">
                              <FormLabel className="text-base">‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á</FormLabel>
                              <FormDescription>
                                ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå
                              </FormDescription>
                            </div>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                    </div>

                    <Separator />

                    {/* ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤ */}
                    <div className="space-y-4">
                      <h4 className="text-sm font-medium flex items-center gap-2">
                        <Thermometer className="h-4 w-4" />
                        ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤
                      </h4>

                      <div className="grid grid-cols-2 gap-4">
                        <FormField
                          control={form.control}
                          name="storageCondition"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>‡∏™‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤</FormLabel>
                              <FormControl>
                                <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏Å‡∏ï‡∏¥, ‡πÄ‡∏¢‡πá‡∏ô, ‡πÅ‡∏´‡πâ‡∏á" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="requiresColdStorage"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                              <div className="space-y-0.5">
                                <FormLabel className="text-base">‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏¢‡πá‡∏ô</FormLabel>
                                <FormDescription>
                                  ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô 2-8¬∞C
                                </FormDescription>
                              </div>
                              <FormControl>
                                <Switch
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                            </FormItem>
                          )}
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Tab 3: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å */}
              <TabsContent value="clinical" className="space-y-4 max-h-[50vh] overflow-y-auto">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center gap-2">
                      <Info className="h-5 w-5" />
                      ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å
                    </CardTitle>
                    <CardDescription>
                      ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏ó‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <FormField
                      control={form.control}
                      name="indications"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤..."
                              rows={3}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="contraindications"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤..."
                              rows={3}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="sideEffects"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô..."
                              rows={3}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="dosageInstructions"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤..."
                              rows={3}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="precautions"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤..."
                              rows={3}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="warnings"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç..."
                              rows={3}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Tab 4: ‡∏Ñ‡∏•‡∏±‡∏á/‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô */}
              <TabsContent value="inventory" className="space-y-4 max-h-[60vh] overflow-y-auto">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center gap-2">
                      <DollarSign className="h-5 w-5" />
                      ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
                    </CardTitle>
                    <CardDescription>
                      ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="standardCost"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó)</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                step="0.01"
                                placeholder="0.00"
                                {...field}
                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="currentCost"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ö‡∏≤‡∏ó)</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                step="0.01"
                                placeholder="0.00"
                                {...field}
                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="reorderPoint"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                placeholder="10"
                                {...field}
                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                              />
                            </FormControl>
                            <FormDescription>
                              ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="maxStockLevel"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                placeholder="1000"
                                {...field}
                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                              />
                            </FormControl>
                            <FormDescription>
                              ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <FormField
                      control={form.control}
                      name="notes"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                              rows={4}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Tab 5: QR Preview */}
              <TabsContent value="preview" className="space-y-4 max-h-[50vh] overflow-y-auto">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center gap-2">
                      <QrCode className="h-5 w-5" />
                      ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á QR Code
                    </CardTitle>
                    <CardDescription>
                      ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á QR Code ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏ô‡∏µ‡πâ
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex flex-col items-center space-y-4">
                      <div className="w-48 h-48 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center">
                        <div className="text-center text-gray-500">
                          <QrCode className="h-12 w-12 mx-auto mb-2" />
                          <p className="text-sm">QR Code Preview</p>
                          <p className="text-xs">(‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)</p>
                        </div>
                      </div>

                      <div className="text-center space-y-2">
                        <Badge variant="outline" className="text-sm">
                          ‡∏£‡∏´‡∏±‡∏™: {watch('hospitalDrugCode') || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å'}
                        </Badge>
                        <p className="text-sm text-gray-600">
                          {watch('name') || watch('genericName') || '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤'}
                        </p>
                        <p className="text-xs text-gray-500">
                          {watch('strength')} {watch('unitOfMeasure')} ‚Ä¢ {dosageFormOptions.find(opt => opt.value === watch('dosageForm'))?.label}
                        </p>
                      </div>
                    </div>

                    <div className="bg-gray-50 p-4 rounded-lg">
                      <h4 className="font-medium mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô QR Code:</h4>
                      <ul className="text-sm text-gray-600 space-y-1">
                        <li>‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</li>
                        <li>‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤: {watch('hospitalDrugCode') || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å'}</li>
                        <li>‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: DRUG</li>
                        <li>‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á</li>
                      </ul>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>

            {/* Form Actions */}
            <div className="sticky bottom-0 bg-white border-t pt-4 mt-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handleCancel}
                    disabled={isLoading}
                  >
                    <X className="h-4 w-4 mr-2" />
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </Button>
                </div>

                <div className="flex items-center space-x-2">
                  {activeTab !== 'basic' && (
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => {
                        const tabs = ['basic', 'classification', 'clinical', 'inventory', 'preview'];
                        const currentIndex = tabs.indexOf(activeTab);
                        if (currentIndex > 0) {
                          setActiveTab(tabs[currentIndex - 1]);
                        }
                      }}
                      disabled={isLoading}
                    >
                      ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                    </Button>
                  )}

                  {activeTab !== 'preview' ? (
                    <Button
                      type="button"
                      onClick={() => {
                        const tabs = ['basic', 'classification', 'clinical', 'inventory', 'preview'];
                        const currentIndex = tabs.indexOf(activeTab);
                        if (currentIndex < tabs.length - 1) {
                          setActiveTab(tabs[currentIndex + 1]);
                        }
                      }}
                      disabled={isLoading}
                    >
                      ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                    </Button>
                  ) : (
                    <Button
                      type="submit"
                      disabled={isLoading}
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      {isLoading ? (
                        <>
                          <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2" />
                          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                        </>
                      ) : (
                        <>
                          <Save className="h-4 w-4 mr-2" />
                          ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
                        </>
                      )}
                    </Button>
                  )}
                </div>
              </div>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}