// prisma/seeds/warehouses.seed.ts - Fixed Warehouse Creation Seed
import { PrismaClient } from "@prisma/client";

export async function seedWarehouses(
  prisma: PrismaClient, 
  hospitals: any[]
) {
  console.log("üè™ Creating Warehouses for all hospitals...");

  const warehousesByHospital: Record<string, any[]> = {};

  for (const hospital of hospitals) {
    console.log(`üè• Creating warehouses for ${hospital.name}...`);
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• warehouse ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Prisma schema
    const warehouseData = [
      {
        name: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏´‡∏•‡∏±‡∏Å",
        warehouseCode: "MAIN",
        type: "CENTRAL",  // ‡πÉ‡∏ä‡πâ enum value ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        location: "‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
        address: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏´‡πâ‡∏≠‡∏á 101",
        description: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≤‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
        capacity: 10000,
        area: 200.50,
        hasTemperatureControl: true,
        minTemperature: 15,
        maxTemperature: 25,
        hasHumidityControl: true,
        minHumidity: 45,
        maxHumidity: 65,
        securityLevel: "HIGH",
        accessControl: true,
        cctv: true,
        alarm: true,
        allowReceiving: true,
        allowDispensing: true,
        allowTransfer: true,
        requireApproval: false,
        isActive: true,
        isMaintenance: false,
        hospitalId: hospital.id,
      },
      {
        name: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤ ICU",
        warehouseCode: "ICU",
        type: "DEPARTMENT",
        location: "‡∏ä‡∏±‡πâ‡∏ô 3 ‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏Å‡∏§‡∏ï",
        address: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡∏ä‡∏±‡πâ‡∏ô 3 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ICU",
        description: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏Å‡∏§‡∏ï",
        capacity: 500,
        area: 30.00,
        hasTemperatureControl: true,
        minTemperature: 20,
        maxTemperature: 25,
        securityLevel: "STANDARD",
        accessControl: true,
        allowReceiving: true,
        allowDispensing: true,
        allowTransfer: true,
        requireApproval: false,
        isActive: true,
        hospitalId: hospital.id,
      },
      {
        name: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô",
        warehouseCode: "ER",
        type: "EMERGENCY",
        location: "‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô",
        address: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô",
        description: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏≤‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
        capacity: 300,
        area: 20.00,
        hasTemperatureControl: true,
        securityLevel: "HIGH",
        accessControl: true,
        allowReceiving: true,
        allowDispensing: true,
        allowTransfer: true,
        requireApproval: false,
        isActive: true,
        hospitalId: hospital.id,
      },
      {
        name: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô",
        warehouseCode: "COLD",
        type: "COLD_STORAGE",
        location: "‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
        address: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô",
        description: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ 2-8¬∞C",
        capacity: 100,
        area: 15.00,
        hasTemperatureControl: true,
        minTemperature: 2,
        maxTemperature: 8,
        hasHumidityControl: true,
        minHumidity: 40,
        maxHumidity: 60,
        securityLevel: "HIGH",
        accessControl: true,
        cctv: true,
        alarm: true,
        allowReceiving: true,
        allowDispensing: true,
        allowTransfer: true,
        requireApproval: true,
        isActive: true,
        hospitalId: hospital.id,
      },
      {
        name: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
        warehouseCode: "CTRL",
        type: "CONTROLLED",
        location: "‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
        address: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏´‡πâ‡∏≠‡∏á‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
        description: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î",
        capacity: 50,
        area: 10.00,
        hasTemperatureControl: true,
        minTemperature: 18,
        maxTemperature: 25,
        securityLevel: "MAXIMUM",
        accessControl: true,
        cctv: true,
        alarm: true,
        allowReceiving: true,
        allowDispensing: true,
        allowTransfer: true,
        requireApproval: true,
        isActive: true,
        hospitalId: hospital.id,
      },
      {
        name: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î",
        warehouseCode: "OR",
        type: "DISPENSING",
        location: "‡∏ä‡∏±‡πâ‡∏ô 2 ‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î",
        address: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡∏ä‡∏±‡πâ‡∏ô 2 ‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î",
        description: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏µ",
        capacity: 200,
        area: 25.00,
        hasTemperatureControl: true,
        securityLevel: "HIGH",
        accessControl: true,
        allowReceiving: true,
        allowDispensing: true,
        allowTransfer: true,
        requireApproval: false,
        isActive: true,
        hospitalId: hospital.id,
      }
    ];

    const hospitalWarehouses = [];
    
    for (const warehouseInfo of warehouseData) {
      try {
        const warehouse = await prisma.warehouse.upsert({
          where: {
            hospitalId_warehouseCode: {
              hospitalId: hospital.id,
              warehouseCode: warehouseInfo.warehouseCode
            }
          },
          update: {},
          create: warehouseInfo as any
        });
        
        hospitalWarehouses.push(warehouse);
        console.log(`  ‚úÖ ${warehouse.name} (${warehouse.warehouseCode}) - ${warehouse.type}`);
      } catch (error) {
        console.error(`  ‚ùå Failed to create warehouse ${warehouseInfo.warehouseCode}:`, error);
      }
    }
    
    warehousesByHospital[hospital.id] = hospitalWarehouses;
    console.log(`‚úÖ Created ${hospitalWarehouses.length} warehouses for ${hospital.name}`);
  }

  const totalWarehouses = Object.values(warehousesByHospital).flat().length;
  console.log(`‚úÖ Successfully created ${totalWarehouses} warehouses for ${hospitals.length} hospitals`);
  
  return warehousesByHospital;
}