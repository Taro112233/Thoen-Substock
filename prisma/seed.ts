// prisma/seed.ts - Auto-generated Modular Seed File
// Generated by scripts/merge-seeds.js v3.0 - Complete Requisition System
// Do not edit manually - modify individual seed files instead

import { PrismaClient } from "@prisma/client";
import { hashPassword } from "../lib/password-utils";

import { seedHospitals } from "./seeds/hospitals.seed";
import { seedPersonnelTypes } from "./seeds/personnel-types.seed";
import { seedDepartments } from "./seeds/departments.seed";
import { seedWarehouses } from "./seeds/warehouses.seed";
import { seedUsers } from "./seeds/users.seed";
import { seedMasterData } from "./seeds/master-data.seed";
import { seedBulkRealDrugs } from "./seeds/robust-bulk-drugs.seed";
import { seedDemoData } from "./seeds/demo-data.seed";
import { seedRequisitionsAndTransactions } from "./seeds/requisitions-transactions.seed";

const prisma = new PrismaClient();

async function main() {
  console.log("🌱 Starting Enhanced Hospital Pharmacy Stock Management System Seed...");
  console.log("🎯 Using Modular Seed Architecture with Neon + Prisma");
  console.log("⚡ Enhanced with Bulk Drug Processing Support v3.0");
  console.log("🏪 Full warehouse management enabled");
  console.log("📋 Complete requisition & transaction system enabled");

  try {
    // ================================
    // PHASE 1: FOUNDATION
    // ================================
    console.log("\n🏗️  PHASE 1: Foundation Setup");
    
    // 1. Create hospitals first
    const hospitals = await seedHospitals(prisma, null);
    console.log(`✅ Created ${hospitals.length} hospitals`);

    // 2. Create system developer with first hospital
    console.log("👤 Creating system developer user...");
    const hashedDevPassword = await hashPassword("dev123");
    const devUser = await prisma.user.upsert({
      where: { email: "dev@system.local" },
      update: {},
      create: {
        email: "dev@system.local",
        username: "developer",
        name: "System Developer",
        firstName: "System",
        lastName: "Developer", 
        phoneNumber: "0800000000",
        employeeId: "DEV001",
        position: "System Developer",
        role: "DEVELOPER",
        status: "ACTIVE",
        hospitalId: hospitals[0].id,
        personnelTypeId: undefined,
        isProfileComplete: true,
        emailVerified: true,
        password: hashedDevPassword,
      },
    });
    console.log("✅ System developer created");

    // ================================
    // PHASE 2: ORGANIZATIONAL STRUCTURE
    // ================================
    console.log("\n🏢 PHASE 2: Organizational Structure");
    
    // 3. Create personnel types for all hospitals
    const personnelTypes = await seedPersonnelTypes(prisma, hospitals, devUser);
    console.log(`✅ Created personnel types for all hospitals`);

    // Update dev user with developer personnel type
    const devPersonnelType = personnelTypes[hospitals[0].id]?.find(pt => pt.typeCode === "DEV");
    if (devPersonnelType) {
      await prisma.user.update({
        where: { id: devUser.id },
        data: { personnelTypeId: devPersonnelType.id }
      });
    }

    // 4. Create departments for all hospitals
    const departments = await seedDepartments(prisma, hospitals, devUser);
    console.log(`✅ Created departments for all hospitals`);

    // ================================
    // PHASE 2.5: WAREHOUSE INFRASTRUCTURE
    // ================================
    console.log("\n🏪 PHASE 2.5: Warehouse Infrastructure");
    
    
    // 5. Create comprehensive warehouses for all hospitals
    const warehouses = await seedWarehouses(prisma, hospitals, devUser);
    console.log(`✅ Created comprehensive warehouses for all hospitals`);
    

    // ================================
    // PHASE 3: PERSONNEL
    // ================================
    console.log("\n👥 PHASE 3: Personnel Management");
    
    // 6. Create diverse users with proper role assignments
    const users = await seedUsers(prisma, hospitals, personnelTypes, departments, devUser);
    console.log(`✅ Created users for all hospitals`);

    // ================================
    // PHASE 4: MASTER DATA
    // ================================
    console.log("\n💊 PHASE 4: Master Data Setup");
    
    // 7. Create master data (drug forms, groups, types, etc.)
    const masterData = await seedMasterData(prisma, hospitals, devUser);
    console.log(`✅ Created master data for all hospitals`);

    // ================================
    // PHASE 5: DRUG DATA PROCESSING
    // ================================
    console.log("\n💊 PHASE 5: Drug Data Processing");
    console.log("⚡ Using enhanced bulk processing for 400+ drug dataset");
    
    // Execute drug seeding with warehouse support
    console.log(`🔄 Starting seedBulkRealDrugs function...`);
    
    const drugResult = await seedBulkRealDrugs(prisma, hospitals, masterData, warehouses, devUser);
    
    // Enhanced result handling
    if (drugResult && typeof drugResult === 'object') {
      // Handle bulk drug processing results
      if ('totalProcessed' in drugResult && 'totalValue' in drugResult) {
        console.log(`✅ Bulk drug processing completed successfully`);
        console.log(`📊 Total drugs processed: ${drugResult.totalProcessed || 0}`);
        console.log(`💰 Total inventory value: ${(drugResult.totalValue || 0).toLocaleString()} บาท`);
        
        if (drugResult.warehouseUsed) {
          console.log(`🏪 Primary warehouse: ${drugResult.warehouseUsed}`);
        }
        
        if (drugResult.categoriesCount) {
          console.log(`📋 Drug Categories Distribution:`);
          Object.entries(drugResult.categoriesCount).forEach(([category, count]) => {
            console.log(`   - ${category}: ${count} drugs`);
          });
        }
      } else if (Array.isArray(drugResult)) {
        // Handle regular drug processing results (array)
        console.log(`✅ Regular drug processing completed`);
        console.log(`📊 Total drugs created: ${drugResult.length}`);
      } else {
        console.log(`✅ Drug processing completed with custom result format`);
      }
    } else {
      console.log(`⚠️  Drug processing completed but no valid result returned`);
    }

    // ================================
    // PHASE 6: DEMO DATA (Optional)
    // ================================
    console.log("\n🎮 PHASE 6: Demo Data (Optional)");
    
    if (process.env.SEED_DEMO_DATA === "true") {
      const demoData = await seedDemoData(prisma, hospitals, drugResult, warehouses, devUser);
      console.log(`✅ Created demo data for testing`);
    } else {
      console.log("⏭️  Skipping demo data (set SEED_DEMO_DATA=true to include)");
    }

    // ================================
    // PHASE 7: REQUISITION & TRANSACTION SYSTEM
    // ================================
    console.log("\n🎯 PHASE 7: Requisition & Transaction Workflow");
    
    
    // Execute requisition and transaction seeding
    const requisitionData = await seedRequisitionsAndTransactions(prisma, hospitals, devUser);
    console.log(`✅ Created complete requisition workflow system`);
    

    // ================================
    // PHASE 8: SYSTEM VERIFICATION
    // ================================
    console.log("\n🔍 PHASE 8: System Verification");
    
    // Verify data integrity
    const verificationResults = await verifySystemIntegrity(prisma);
    console.log("✅ System verification completed");

    // ================================
    // FINAL SUMMARY
    // ================================
    console.log("\n🎉 ENHANCED SEED COMPLETED SUCCESSFULLY!");
    console.log("=" * 60);
    
    console.log(`
🏥 HOSPITAL SYSTEM SUMMARY:
├── Hospitals: ${hospitals.length}
├── Personnel Types: ${Object.keys(personnelTypes).length} hospitals × types
├── Departments: ${Object.values(departments).reduce((sum, depts) => sum + depts.length, 0)}
├── Warehouses: ${Object.values(warehouses).reduce((sum, whs) => sum + whs.length, 0)}
└── Users: ${Object.values(users).reduce((sum, usrs) => sum + usrs.length, 0)}

💊 INVENTORY SYSTEM SUMMARY:
├── Drug Forms: ${masterData.drugForms?.length || 0}
├── Drug Groups: ${masterData.drugGroups?.length || 0}
├── Drug Types: ${masterData.drugTypes?.length || 0}
├── Storage Conditions: ${masterData.storageConditions?.length || 0}
└── Drugs Created: ${drugResult?.totalProcessed || drugResult?.length || 0}

🎯 REQUISITION SYSTEM SUMMARY:
├── Total Requisitions: ${requisitionData.totalRequisitions}
├── Completed Requisitions: ${requisitionData.completedRequisitions}
├── Stock Transactions: ${requisitionData.totalTransactions}
└── Templates: ${requisitionData.totalTemplates}

🔐 AUTHENTICATION SYSTEM:
├── Developer Account: dev@system.local / dev123
├── Multi-role Support: ✅
├── Hospital Isolation: ✅
├── Profile Completion: ✅
└── Approval Workflow: ✅

🚀 SYSTEM FEATURES READY:
├── Multi-tenant Architecture: ✅
├── Real Drug Database: ✅
├── Complete Workflow: ✅
├── Audit Trail: ✅
├── Mobile-Ready Data: ✅
└── Production-Ready: ✅
    `);

    console.log("\n🎯 NEXT STEPS:");
    console.log("1. Run: npm run dev");
    console.log("2. Login: dev@system.local / dev123");
    console.log("3. Test requisition workflow");
    console.log("4. Verify multi-hospital isolation");
    console.log("5. Check inventory management");
    
    console.log("\n📚 TEST SCENARIOS AVAILABLE:");
    
    console.log("- ✅ Regular drug requisitions");
    console.log("- ✅ Emergency drug requests");
    console.log("- ✅ Scheduled deliveries");
    console.log("- ✅ Drug returns");
    console.log("- ✅ Multi-stage approvals");
    console.log("- ✅ Stock transactions");
    console.log("- ✅ Workflow tracking");
    

  } catch (error) {
    console.error("❌ Seed failed:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ================================
// SYSTEM VERIFICATION FUNCTION
// ================================
async function verifySystemIntegrity(prisma: PrismaClient) {
  console.log("🔍 Verifying system integrity...");
  
  try {
    // Check basic counts
    const counts = await Promise.all([
      prisma.hospital.count(),
      prisma.user.count(),
      prisma.drug.count(),
      prisma.stockCard.count(),
      prisma.requisition.count().catch(() => 0), // Handle if requisition table doesn't exist
      prisma.stockTransaction.count().catch(() => 0) // Handle if transaction table doesn't exist
    ]);

    const [hospitals, users, drugs, stockCards, requisitions, transactions] = counts;

    // Check relationships
    const relationshipChecks = await Promise.all([
      prisma.user.count({ where: { hospital: { isNot: null } } }),
      prisma.stockCard.count({ where: { drug: { isNot: null } } }),
      prisma.requisition.count({ where: { requester: { isNot: null } } }).catch(() => 0),
      prisma.stockTransaction.count({ where: { stockCard: { isNot: null } } }).catch(() => 0)
    ]);

    const [usersWithHospitals, stockCardsWithDrugs, requisitionsWithRequesters, transactionsWithStocks] = relationshipChecks;

    console.log(`
🔍 INTEGRITY VERIFICATION RESULTS:
├── Data Consistency:
│   ├── Hospitals: ${hospitals} ✅
│   ├── Users: ${users} ✅
│   ├── Drugs: ${drugs} ✅
│   ├── Stock Cards: ${stockCards} ✅
│   ├── Requisitions: ${requisitions} ✅
│   └── Transactions: ${transactions} ✅
├── Relationship Integrity:
│   ├── Users → Hospitals: ${usersWithHospitals}/${users} ✅
│   ├── Stock Cards → Drugs: ${stockCardsWithDrugs}/${stockCards} ✅
│   ├── Requisitions → Users: ${requisitionsWithRequesters}/${requisitions} ✅
│   └── Transactions → Stock: ${transactionsWithStocks}/${transactions} ✅
    `);

    return {
      dataIntegrity: true,
      relationshipIntegrity: true,
      counts: { hospitals, users, drugs, stockCards, requisitions, transactions }
    };

  } catch (error) {
    console.error("❌ Verification failed:", error);
    return { dataIntegrity: false, error };
  }
}

// Execute seed
main()
  .catch((e) => {
    console.error("💥 Fatal error during seeding:", e);
    process.exit(1);
  });

export { prisma };