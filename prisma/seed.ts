// prisma/seed.ts - Enhanced Seed Script with Master Data (FIXED)
import { PrismaClient, PersonnelHierarchy } from "@prisma/client";
import { hashPassword } from "../lib/password-utils";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Starting enhanced database seed with Master Data...");

  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const hospital = await prisma.hospital.upsert({
      where: { hospitalCode: "DEMO001" },
      update: {},
      create: {
        hospitalCode: "DEMO001",
        name: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏•‡∏≥‡∏õ‡∏≤‡∏á",
        nameEn: "Lampang Hospital",
        type: "GOVERNMENT",
        status: "ACTIVE",
        address: "123 ‡∏ñ‡∏ô‡∏ô‡∏ï‡∏∞‡∏Ñ‡∏£‡∏≠",
        district: "‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
        subDistrict: "‡πÄ‡∏°‡∏∑‡∏≠‡∏á", 
        province: "‡∏•‡∏≥‡∏õ‡∏≤‡∏á",
        postalCode: "52000",
        phone: "054-237-400",
        email: "info@lampang-hospital.go.th",
        website: "https://lampang-hospital.go.th",
        licenseNo: "LIC001",
        licenseExpiry: new Date("2025-12-31"),
        bedCount: 350,
        employeeCount: 280,
        establishedYear: 1952,
        subscriptionPlan: "PREMIUM",
        subscriptionStart: new Date(),
        subscriptionEnd: new Date("2025-12-31"),
        maxUsers: 100,
        maxWarehouses: 10,
        lastActivityAt: new Date(),
      },
    });

    console.log("‚úÖ Created hospital:", hospital.name);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const hospital2 = await prisma.hospital.upsert({
      where: { hospitalCode: "DEMO002" },
      update: {},
      create: {
        hospitalCode: "DEMO002",
        name: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏ñ‡∏¥‡∏ô",
        nameEn: "Thoen Hospital",
        type: "COMMUNITY",
        status: "ACTIVE",
        address: "456 ‡∏ñ‡∏ô‡∏ô‡πÄ‡∏ñ‡∏¥‡∏ô-‡∏•‡∏≥‡∏õ‡∏≤‡∏á",
        district: "‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
        subDistrict: "‡πÄ‡∏ñ‡∏¥‡∏ô", 
        province: "‡∏•‡∏≥‡∏õ‡∏≤‡∏á",
        postalCode: "52160",
        phone: "054-231-234",
        email: "info@thoen-hospital.go.th",
        licenseNo: "LIC002",
        licenseExpiry: new Date("2025-12-31"),
        bedCount: 120,
        employeeCount: 90,
        establishedYear: 1965,
        subscriptionPlan: "STANDARD",
        subscriptionStart: new Date(),
        subscriptionEnd: new Date("2025-12-31"),
        maxUsers: 50,
        maxWarehouses: 5,
        lastActivityAt: new Date(),
      },
    });

    console.log("‚úÖ Created hospital:", hospital2.name);

    // ================================
    // CREATE SYSTEM USER FIRST (‡πÑ‡∏°‡πà‡∏°‡∏µ PersonnelType)
    // ================================
    console.log("üë§ Creating system developer user...");

    const hashedDevPassword = await hashPassword("dev123");
    const devUser = await prisma.user.upsert({
      where: { email: "dev@system.local" },
      update: {},
      create: {
        email: "dev@system.local",
        username: "developer",
        name: "System Developer",
        firstName: "System",
        lastName: "Developer", 
        phoneNumber: "0800000000",
        employeeId: "DEV001",
        position: "System Developer",
        role: "DEVELOPER",
        status: "ACTIVE",
        hospitalId: hospital.id,
        personnelTypeId: null, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ PersonnelType
        isProfileComplete: true,
        emailVerified: true,
        password: hashedDevPassword,
      },
    });

    console.log("‚úÖ Created developer user:", devUser.email);

    // ================================
    // MASTER DATA - PERSONNEL TYPES (‡πÉ‡∏ä‡πâ devUser.id ‡πÅ‡∏ó‡∏ô "system")
    // ================================
    console.log("üéØ Creating Personnel Types (Master Data)...");

    const personnelTypes = [
      {
        typeCode: "DEV",
        typeName: "‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤",
        typeNameEn: "Developer", 
        hierarchy: PersonnelHierarchy.DEVELOPER, // ‡πÉ‡∏ä‡πâ enum ‡∏à‡∏≤‡∏Å Prisma
        levelOrder: 1,
        canManageHospitals: true,
        canManageWarehouses: true,
        canManageDepartments: true,
        canManagePersonnel: true,
        canManageDrugs: true,
        canManageMasterData: true,
        canViewReports: true,
        canApproveUsers: true,
        description: "‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        isSystemDefault: true,
      },
      {
        typeCode: "DIR",
        typeName: "‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£",
        typeNameEn: "Director",
        hierarchy: PersonnelHierarchy.DIRECTOR, 
        levelOrder: 2,
        canManageHospitals: false,
        canManageWarehouses: true,
        canManageDepartments: true,
        canManagePersonnel: true,
        canManageDrugs: true,
        canManageMasterData: false,
        canViewReports: true,
        canApproveUsers: true,
        description: "‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á",
        maxSubordinates: 50,
      },
      {
        typeCode: "GRP_HEAD",
        typeName: "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô",
        typeNameEn: "Group Head",
        hierarchy: PersonnelHierarchy.GROUP_HEAD,
        levelOrder: 3, 
        canManageHospitals: false,
        canManageWarehouses: false,
        canManageDepartments: false,
        canManagePersonnel: false,
        canManageDrugs: true,
        canManageMasterData: false,
        canViewReports: true,
        canApproveUsers: false,
        description: "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô ‡∏î‡∏π‡πÅ‡∏•‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏î‡πâ‡∏≤‡∏ô",
        maxSubordinates: 15,
      },
      {
        typeCode: "STAFF",
        typeName: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô",
        typeNameEn: "Staff",
        hierarchy: PersonnelHierarchy.STAFF,
        levelOrder: 4,
        canManageHospitals: false,
        canManageWarehouses: false,
        canManageDepartments: false,
        canManagePersonnel: false,
        canManageDrugs: false,
        canManageMasterData: false,
        canViewReports: true,
        canApproveUsers: false,
        description: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
      },
      {
        typeCode: "STU",
        typeName: "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        typeNameEn: "Student",
        hierarchy: PersonnelHierarchy.STUDENT,
        levelOrder: 5,
        canManageHospitals: false,
        canManageWarehouses: false,
        canManageDepartments: false,
        canManagePersonnel: false,
        canManageDrugs: false,
        canManageMasterData: false,
        canViewReports: false,
        canApproveUsers: false,
        description: "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≥‡∏Å‡∏±‡∏î",
      }
    ];

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PersonnelTypes ‡πÉ‡∏ä‡πâ devUser.id ‡πÅ‡∏ó‡∏ô "system"
    const createdPersonnelTypes: any[] = [];
    
    for (const personnelType of personnelTypes) {
      const created = await prisma.personnelType.upsert({
        where: { 
          hospitalId_typeCode: {
            hospitalId: hospital.id,
            typeCode: personnelType.typeCode
          }
        },
        update: {},
        create: {
          ...personnelType,
          hospitalId: hospital.id,
          createdBy: devUser.id // ‡πÉ‡∏ä‡πâ devUser.id ‡πÅ‡∏ó‡∏ô "system"
        }
      });
      createdPersonnelTypes.push(created);
      console.log(`‚úÖ Created personnel type: ${personnelType.typeName}`);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó devUser ‡πÉ‡∏´‡πâ‡∏°‡∏µ personnelTypeId
    const devPersonnelType = createdPersonnelTypes.find(pt => pt.typeCode === "DEV");
    await prisma.user.update({
      where: { id: devUser.id },
      data: { personnelTypeId: devPersonnelType.id }
    });

    console.log("‚úÖ Updated developer user with personnel type");

    // ================================
    // MASTER DATA - DRUG FORMS
    // ================================
    console.log("üíä Creating Drug Forms (Master Data)...");

    const drugForms = [
      {
        formCode: "TAB",
        formName: "‡∏¢‡∏≤‡πÄ‡∏°‡πá‡∏î",
        formNameEn: "Tablet",
        category: "ORAL",
        description: "‡∏¢‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏°‡πá‡∏î ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô",
        usageInstructions: "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡πâ‡∏≥",
        commonStrengths: ["250mg", "500mg", "1g"],
        standardUnits: ["tablet", "tabs"]
      },
      {
        formCode: "CAP",
        formName: "‡∏¢‡∏≤‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏•",
        formNameEn: "Capsule", 
        category: "ORAL",
        description: "‡∏¢‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏• ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô",
        usageInstructions: "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏°‡πá‡∏î ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î",
        commonStrengths: ["250mg", "500mg"],
        standardUnits: ["capsule", "caps"]
      },
      {
        formCode: "INJ",
        formName: "‡∏¢‡∏≤‡∏â‡∏µ‡∏î",
        formNameEn: "Injection",
        category: "INJECTION", 
        description: "‡∏¢‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏µ‡∏î",
        requiresSpecialStorage: true,
        usageInstructions: "‡∏â‡∏µ‡∏î‡πÇ‡∏î‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°",
        commonStrengths: ["1ml", "2ml", "5ml", "10ml"],
        standardUnits: ["ampoule", "vial", "ml"]
      },
      {
        formCode: "SYR",
        formName: "‡∏¢‡∏≤‡∏ô‡πâ‡∏≥",
        formNameEn: "Syrup",
        category: "ORAL",
        description: "‡∏¢‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°",
        usageInstructions: "‡πÄ‡∏Ç‡∏¢‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ",
        commonStrengths: ["60ml", "100ml", "120ml"],
        standardUnits: ["bottle", "ml"]
      },
      {
        formCode: "CRE",
        formName: "‡∏Ñ‡∏£‡∏µ‡∏°",
        formNameEn: "Cream",
        category: "TOPICAL",
        description: "‡∏¢‡∏≤‡∏ó‡∏≤‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å",
        usageInstructions: "‡∏ó‡∏≤‡∏ö‡∏≤‡∏á‡πÜ ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
        commonStrengths: ["15g", "30g"],
        standardUnits: ["tube", "g"]
      },
      {
        formCode: "SUP",
        formName: "‡∏¢‡∏≤‡πÄ‡∏´‡∏ô‡πá‡∏ö",
        formNameEn: "Suppository",
        category: "OTHER",
        description: "‡∏¢‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏≤‡∏á‡∏ó‡∏ß‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å",
        requiresSpecialStorage: true,
        usageInstructions: "‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô",
        standardUnits: ["suppository", "piece"]
      }
    ];

    for (const form of drugForms) {
      await prisma.drugForm.upsert({
        where: {
          hospitalId_formCode: {
            hospitalId: hospital.id,
            formCode: form.formCode
          }
        },
        update: {},
        create: {
          ...form,
          hospitalId: hospital.id,
          isSystemDefault: true,
          createdBy: devUser.id
        }
      });
      console.log(`‚úÖ Created drug form: ${form.formName}`);
    }

    // ================================
    // MASTER DATA - DRUG GROUPS  
    // ================================
    console.log("üß¨ Creating Drug Groups (Master Data)...");

    const drugGroups = [
      {
        groupCode: "ANTI",
        groupName: "Antibiotic",
        groupNameTh: "‡∏¢‡∏≤‡∏õ‡∏è‡∏¥‡∏ä‡∏µ‡∏ß‡∏ô‡∏∞",
        therapeuticClass: "Anti-infective",
        description: "‡∏¢‡∏≤‡∏ï‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢",
        requiresMonitoring: true,
        hasInteractions: true,
        riskLevel: "MEDIUM"
      },
      {
        groupCode: "ANALG",
        groupName: "Analgesic",
        groupNameTh: "‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡∏õ‡∏ß‡∏î",
        therapeuticClass: "Pain Relief",
        description: "‡∏¢‡∏≤‡∏ö‡∏£‡∏£‡πÄ‡∏ó‡∏≤‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î",
        riskLevel: "LOW"
      },
      {
        groupCode: "ANTIH",
        groupName: "Antihistamine", 
        groupNameTh: "‡∏¢‡∏≤‡∏ï‡πâ‡∏≤‡∏ô‡∏Æ‡∏µ‡∏™‡∏ï‡∏≤‡∏°‡∏µ‡∏ô",
        therapeuticClass: "Allergy",
        description: "‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡πÅ‡∏û‡πâ",
        riskLevel: "LOW"
      },
      {
        groupCode: "ANTIV",
        groupName: "Antiviral",
        groupNameTh: "‡∏¢‡∏≤‡∏ï‡πâ‡∏≤‡∏ô‡πÑ‡∏ß‡∏£‡∏±‡∏™",
        therapeuticClass: "Anti-infective",
        description: "‡∏¢‡∏≤‡∏ï‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡∏£‡∏±‡∏™",
        requiresMonitoring: true,
        riskLevel: "MEDIUM"
      },
      {
        groupCode: "CARD",
        groupName: "Cardiovascular",
        groupNameTh: "‡∏¢‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î", 
        therapeuticClass: "Cardiovascular",
        description: "‡∏¢‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î",
        requiresMonitoring: true,
        hasInteractions: true,
        riskLevel: "HIGH"
      }
    ];

    for (const group of drugGroups) {
      await prisma.drugGroup.upsert({
        where: {
          hospitalId_groupCode: {
            hospitalId: hospital.id,
            groupCode: group.groupCode
          }
        },
        update: {},
        create: {
          ...group,
          hospitalId: hospital.id,
          isSystemDefault: true,
          createdBy: devUser.id
        }
      });
      console.log(`‚úÖ Created drug group: ${group.groupNameTh}`);
    }

    // ================================
    // MASTER DATA - DRUG TYPES
    // ================================
    console.log("‚ö†Ô∏è Creating Drug Types (Master Data)...");

    const drugTypes = [
      {
        typeCode: "HIGH_ALERT",
        typeName: "High Alert Drug",
        typeNameTh: "‡∏¢‡∏≤‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á",
        isHighAlert: true,
        requiresWitness: true,
        requiresApproval: true,
        auditRequired: true,
        description: "‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©",
        precautions: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
        color: "#dc2626",
        iconName: "alert-triangle"
      },
      {
        typeCode: "NARCOTIC",
        typeName: "Narcotic Drug", 
        typeNameTh: "‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î",
        isNarcotic: true,
        isControlled: true,
        requiresWitness: true,
        requiresApproval: true,
        requiresDoubleLock: true,
        maxDispenseQty: 30,
        auditRequired: true,
        reportingRequired: true,
        description: "‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î",
        precautions: "‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏π‡πà ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        color: "#dc2626",
        iconName: "shield-alert"
      },
      {
        typeCode: "CONTROLLED",
        typeName: "Controlled Drug",
        typeNameTh: "‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
        isControlled: true,
        requiresApproval: true,
        auditRequired: true,
        description: "‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ",
        color: "#f59e0b",
        iconName: "lock"
      },
      {
        typeCode: "PSYCHO",
        typeName: "Psychotropic Drug",
        typeNameTh: "‡∏¢‡∏≤‡∏à‡∏¥‡∏ï‡πÄ‡∏ß‡∏ä",
        isPsychotropic: true,
        isControlled: true,
        requiresApproval: true,
        auditRequired: true,
        description: "‡∏¢‡∏≤‡∏à‡∏¥‡∏ï‡πÄ‡∏ß‡∏ä‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
        color: "#8b5cf6",
        iconName: "brain"
      },
      {
        typeCode: "REFER",
        typeName: "Refer Drug",
        typeNameTh: "‡∏¢‡∏≤ Refer", 
        isRefer: true,
        requiresApproval: true,
        description: "‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©",
        color: "#06b6d4",
        iconName: "arrow-right-circle"
      },
      {
        typeCode: "DANGEROUS",
        typeName: "Dangerous Drug",
        typeNameTh: "‡∏¢‡∏≤‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢",
        isDangerous: true,
        requiresWitness: true,
        auditRequired: true,
        description: "‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ",
        precautions: "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
        color: "#dc2626",
        iconName: "skull"
      }
    ];

    for (const type of drugTypes) {
      await prisma.drugType.upsert({
        where: {
          hospitalId_typeCode: {
            hospitalId: hospital.id,
            typeCode: type.typeCode
          }
        },
        update: {},
        create: {
          ...type,
          hospitalId: hospital.id,
          isSystemDefault: true,
          createdBy: devUser.id
        }
      });
      console.log(`‚úÖ Created drug type: ${type.typeNameTh}`);
    }

    // ================================
    // MASTER DATA - DRUG STORAGE CONDITIONS
    // ================================
    console.log("‚ùÑÔ∏è Creating Drug Storage Conditions (Master Data)...");

    const storageConditions = [
      {
        storageCode: "RT",
        storageName: "Room Temperature",
        storageNameTh: "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏´‡πâ‡∏≠‡∏á",
        temperatureMin: 15,
        temperatureMax: 30,
        storageInstructions: "‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏´‡πâ‡∏á ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î",
        color: "#22c55e",
        iconName: "thermometer"
      },
      {
        storageCode: "FRIDGE",
        storageName: "Refrigerated",
        storageNameTh: "‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô",
        temperatureMin: 2,
        temperatureMax: 8,
        requiresRefrigeration: true,
        monitoringRequired: true,
        checkFrequency: "DAILY",
        storageInstructions: "‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô 2-8¬∞C",
        handlingPrecautions: "‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 8¬∞C",
        color: "#3b82f6",
        iconName: "snowflake"
      },
      {
        storageCode: "FREEZE",
        storageName: "Frozen",
        storageNameTh: "‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á",
        temperatureMin: -25,
        temperatureMax: -10,
        requiresFreezing: true,
        monitoringRequired: true,
        checkFrequency: "DAILY",
        storageInstructions: "‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á -20¬∞C ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤",
        handlingPrecautions: "‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏•‡∏∞‡∏•‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏∞‡∏•‡∏≤‡∏¢",
        color: "#06b6d4",
        iconName: "ice-cream-2"
      },
      {
        storageCode: "DRY",
        storageName: "Keep Dry",
        storageNameTh: "‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏´‡πâ‡∏á",
        temperatureMin: 15,
        temperatureMax: 25,
        humidityMax: 60,
        protectFromMoisture: true,
        storageInstructions: "‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏´‡πâ‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 60%",
        color: "#f59e0b",
        iconName: "droplets-off"
      },
      {
        storageCode: "DARK",
        storageName: "Protect from Light",
        storageNameTh: "‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏™‡∏á",
        temperatureMin: 15,
        temperatureMax: 30,
        protectFromLight: true,
        storageInstructions: "‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏∑‡∏î ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏á‡πÑ‡∏ü",
        color: "#6b7280",
        iconName: "sun-off"
      },
      {
        storageCode: "CONTROLLED",
        storageName: "Controlled Environment",
        storageNameTh: "‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
        temperatureMin: 20,
        temperatureMax: 25,
        humidityMin: 45,
        humidityMax: 65,
        protectFromLight: true,
        protectFromMoisture: true,
        requiresInertGas: true,
        monitoringRequired: true,
        checkFrequency: "HOURLY",
        storageInstructions: "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏á",
        color: "#8b5cf6",
        iconName: "gauge"
      }
    ];

    for (const storage of storageConditions) {
      await prisma.drugStorage.upsert({
        where: {
          hospitalId_storageCode: {
            hospitalId: hospital.id,
            storageCode: storage.storageCode
          }
        },
        update: {},
        create: {
          ...storage,
          hospitalId: hospital.id,
          isSystemDefault: true,
          createdBy: devUser.id
        }
      });
      console.log(`‚úÖ Created storage condition: ${storage.storageNameTh}`);
    }

    // ================================
    // CREATE DEPARTMENTS
    // ================================
    console.log("üè¢ Creating Departments...");

    const departments = [
      {
        departmentCode: "PHARM",
        name: "‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
        nameEn: "Pharmacy Department",
        type: "PHARMACY",
        location: "‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏≠‡∏Å",
        phone: "054-237-400 ‡∏ï‡πà‡∏≠ 101",
        email: "pharmacy@lampang-hospital.go.th",
      },
      {
        departmentCode: "EMERG",
        name: "‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô", 
        nameEn: "Emergency Department",
        type: "EMERGENCY",
        location: "‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô",
        phone: "054-237-400 ‡∏ï‡πà‡∏≠ 911",
        email: "emergency@lampang-hospital.go.th",
      },
      {
        departmentCode: "ICU",
        name: "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏Å‡∏§‡∏ï",
        nameEn: "Intensive Care Unit", 
        type: "ICU",
        location: "‡∏ä‡∏±‡πâ‡∏ô 3 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô",
        phone: "054-237-400 ‡∏ï‡πà‡∏≠ 301",
        email: "icu@lampang-hospital.go.th",
      },
      {
        departmentCode: "OR",
        name: "‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î",
        nameEn: "Operating Room",
        type: "SURGERY", 
        location: "‡∏ä‡∏±‡πâ‡∏ô 2 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô",
        phone: "054-237-400 ‡∏ï‡πà‡∏≠ 201",
        email: "or@lampang-hospital.go.th",
      },
      {
        departmentCode: "OPD",
        name: "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏≠‡∏Å",
        nameEn: "Out Patient Department",
        type: "OUTPATIENT",
        location: "‡∏ä‡∏±‡πâ‡∏ô 1-2 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏≠‡∏Å",
        phone: "054-237-400 ‡∏ï‡πà‡∏≠ 102",
        email: "opd@lampang-hospital.go.th",
      },
      {
        departmentCode: "IPD",
        name: "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô", 
        nameEn: "In Patient Department",
        type: "INPATIENT",
        location: "‡∏ä‡∏±‡πâ‡∏ô 4-8 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô",
        phone: "054-237-400 ‡∏ï‡πà‡∏≠ 401",
        email: "ipd@lampang-hospital.go.th",
      }
    ];

    for (const dept of departments) {
      const department = await prisma.department.upsert({
        where: { 
          hospitalId_departmentCode: {
            hospitalId: hospital.id,
            departmentCode: dept.departmentCode,
          }
        },
        update: {},
        create: {
          hospitalId: hospital.id,
          departmentCode: dept.departmentCode,
          name: dept.name,
          nameEn: dept.nameEn,
          type: dept.type as any,
          location: dept.location,
          phone: dept.phone,
          email: dept.email,
          isActive: true,
        },
      });
      console.log("‚úÖ Created department:", department.name);
    }

    // ================================
    // CREATE WAREHOUSES  
    // ================================
    console.log("üè™ Creating Warehouses...");

    const warehouses = [
      {
        warehouseCode: "CENTRAL",
        name: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏´‡∏•‡∏±‡∏Å",
        type: "CENTRAL",
        location: "‡∏ä‡∏±‡πâ‡∏ô B1 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
        area: 200.5,
        capacity: 10000,
        hasTemperatureControl: true,
        minTemperature: 15,
        maxTemperature: 25,
        hasHumidityControl: true,
        minHumidity: 45,
        maxHumidity: 65,
        securityLevel: "HIGH",
        accessControl: true,
        cctv: true,
        alarm: true,
        requireApproval: true
      },
      {
        warehouseCode: "EMERG_STORE",
        name: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô",
        type: "EMERGENCY", 
        location: "‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô",
        area: 15.0,
        capacity: 500,
        securityLevel: "STANDARD",
        accessControl: true
      },
      {
        warehouseCode: "CONTROLLED",
        name: "‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
        type: "CONTROLLED",
        location: "‡∏ä‡∏±‡πâ‡∏ô B1 ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©",
        area: 25.0,
        capacity: 1000,
        hasTemperatureControl: true,
        minTemperature: 20,
        maxTemperature: 25,
        securityLevel: "MAXIMUM",
        accessControl: true,
        cctv: true,
        alarm: true
      },
      {
        warehouseCode: "COLD_STORE", 
        name: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô",
        type: "COLD_STORAGE",
        location: "‡∏ä‡∏±‡πâ‡∏ô B1 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
        area: 20.0,
        capacity: 1500,
        hasTemperatureControl: true,
        minTemperature: 2,
        maxTemperature: 8,
        securityLevel: "HIGH",
        accessControl: true,
        cctv: true
      }
    ];

    for (const warehouse of warehouses) {
      const warehouseRecord = await prisma.warehouse.upsert({
        where: {
          hospitalId_warehouseCode: {
            hospitalId: hospital.id,
            warehouseCode: warehouse.warehouseCode
          }
        },
        update: {},
        create: {
          ...warehouse,
          type: warehouse.type as any,
          hospitalId: hospital.id,
          isActive: true
        }
      });
      console.log("‚úÖ Created warehouse:", warehouseRecord.name);
    }

    // ================================
    // CREATE ADDITIONAL USERS
    // ================================
    console.log("üë• Creating Additional Users...");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Director User
    const hashedDirectorPassword = await hashPassword("director123");
    const directorPersonnelType = createdPersonnelTypes.find(pt => pt.typeCode === "DIR");

    const directorUser = await prisma.user.upsert({
      where: { email: "director@lampang-hospital.go.th" },
      update: {},
      create: {
        email: "director@lampang-hospital.go.th",
        username: "director",
        name: "‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
        firstName: "‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£",
        lastName: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
        phoneNumber: "054-237-400",
        employeeId: "DIR001", 
        position: "‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏•‡∏≥‡∏õ‡∏≤‡∏á",
        role: "DIRECTOR",
        status: "ACTIVE",
        hospitalId: hospital.id,
        personnelTypeId: directorPersonnelType?.id,
        isProfileComplete: true,
        emailVerified: true,
        password: hashedDirectorPassword,
      },
    });

    console.log("‚úÖ Created director user:", directorUser.email);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Pharmacy Manager User
    const hashedPharmPassword = await hashPassword("pharm123");
    const pharmDept = await prisma.department.findFirst({ 
      where: { departmentCode: "PHARM", hospitalId: hospital.id } 
    });
    const groupHeadPersonnelType = createdPersonnelTypes.find(pt => pt.typeCode === "GRP_HEAD");
    
    const pharmUser = await prisma.user.upsert({
      where: { email: "pharm@lampang-hospital.go.th" },
      update: {},
      create: {
        email: "pharm@lampang-hospital.go.th",
        username: "pharm_head",
        name: "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
        firstName: "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤",
        lastName: "‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
        phoneNumber: "054-237-401",
        employeeId: "PH001",
        position: "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
        role: "GROUP_HEAD",
        status: "ACTIVE",
        hospitalId: hospital.id,
        departmentId: pharmDept?.id,
        personnelTypeId: groupHeadPersonnelType?.id,
        isProfileComplete: true,
        emailVerified: true,
        password: hashedPharmPassword,
      },
    });

    console.log("‚úÖ Created pharmacy head user:", pharmUser.email);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Staff User ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)
    const hashedStaffPassword = await hashPassword("staff123");
    const icuDept = await prisma.department.findFirst({ 
      where: { departmentCode: "ICU", hospitalId: hospital.id } 
    });
    const staffPersonnelType = createdPersonnelTypes.find(pt => pt.typeCode === "STAFF");
    
    const staffUser = await prisma.user.upsert({
      where: { email: "nurse@lampang-hospital.go.th" },
      update: {},
      create: {
        email: "nurse@lampang-hospital.go.th", 
        username: "nurse001",
        name: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
        firstName: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
        lastName: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
        phoneNumber: "054-237-301",
        employeeId: "NS001",
        position: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û",
        role: "STAFF",
        status: "PENDING", // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        hospitalId: hospital.id,
        departmentId: icuDept?.id,
        personnelTypeId: staffPersonnelType?.id,
        isProfileComplete: true,
        emailVerified: true,
        password: hashedStaffPassword,
      },
    });

    console.log("‚úÖ Created staff user:", staffUser.email);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Student User ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const hashedStudentPassword = await hashPassword("student123");
    const studentPersonnelType = createdPersonnelTypes.find(pt => pt.typeCode === "STU");
    
    const studentUser = await prisma.user.upsert({
      where: { email: "student@lampang-hospital.go.th" },
      update: {},
      create: {
        email: "student@lampang-hospital.go.th",
        username: "student001", 
        name: "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô",
        firstName: "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        lastName: "‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô",
        phoneNumber: "081-234-5678",
        employeeId: "STU001",
        position: "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        role: "STUDENT",
        status: "PENDING",
        hospitalId: hospital.id,
        departmentId: pharmDept?.id,
        personnelTypeId: studentPersonnelType?.id,
        isProfileComplete: true,
        emailVerified: true,
        password: hashedStudentPassword,
      },
    });

    console.log("‚úÖ Created student user:", studentUser.email);

    // ================================
    // CREATE ADDITIONAL TEST USERS FOR HOSPITAL 2
    // ================================
    console.log("üë• Creating Users for Hospital 2...");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PersonnelTypes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà 2
    const hospital2PersonnelTypes: any[] = [];
    for (const personnelType of personnelTypes) {
      const created = await prisma.personnelType.upsert({
        where: { 
          hospitalId_typeCode: {
            hospitalId: hospital2.id,
            typeCode: personnelType.typeCode
          }
        },
        update: {},
        create: {
          ...personnelType,
          hospitalId: hospital2.id,
          createdBy: devUser.id
        }
      });
      hospital2PersonnelTypes.push(created);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Director ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà 2
    const hashedDirector2Password = await hashPassword("director2123");
    const director2PersonnelType = hospital2PersonnelTypes.find(pt => pt.typeCode === "DIR");

    const director2User = await prisma.user.upsert({
      where: { email: "director@thoen-hospital.go.th" },
      update: {},
      create: {
        email: "director@thoen-hospital.go.th",
        username: "director2",
        name: "‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏ñ‡∏¥‡∏ô",
        firstName: "‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£",
        lastName: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏ñ‡∏¥‡∏ô",
        phoneNumber: "054-231-234",
        employeeId: "DIR002", 
        position: "‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏ñ‡∏¥‡∏ô",
        role: "DIRECTOR",
        status: "ACTIVE",
        hospitalId: hospital2.id,
        personnelTypeId: director2PersonnelType?.id,
        isProfileComplete: true,
        emailVerified: true,
        password: hashedDirector2Password,
      },
    });

    console.log("‚úÖ Created director user for hospital 2:", director2User.email);

    console.log("\nüéâ Enhanced database seed completed successfully!");
    console.log("\nüìã Test accounts:");
    console.log("üîß Developer: dev@system.local / dev123 (ACTIVE)");
    console.log("üë®‚Äçüíº Director (Lampang): director@lampang-hospital.go.th / director123 (ACTIVE)");
    console.log("üë®‚Äçüíº Director (Thoen): director@thoen-hospital.go.th / director2123 (ACTIVE)");
    console.log("üë©‚Äç‚öïÔ∏è Pharmacy Head: pharm@lampang-hospital.go.th / pharm123 (ACTIVE)"); 
    console.log("üë©‚Äç‚öïÔ∏è Nurse: nurse@lampang-hospital.go.th / staff123 (PENDING)");
    console.log("üéì Student: student@lampang-hospital.go.th / student123 (PENDING)");
    
    console.log("\nüè• Hospitals:");
    console.log("üè¢ ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏•‡∏≥‡∏õ‡∏≤‡∏á (DEMO001) - 5 users");
    console.log("üè¢ ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏ñ‡∏¥‡∏ô (DEMO002) - 1 user");
    
    console.log("\nüéØ Master Data Created:");
    console.log("üë• Personnel Types: Developer, Director, Group Head, Staff, Student (√ó2 hospitals)");
    console.log("üíä Drug Forms: Tablet, Capsule, Injection, Syrup, Cream, Suppository");
    console.log("üß¨ Drug Groups: Antibiotic, Analgesic, Antihistamine, Antiviral, Cardiovascular");
    console.log("‚ö†Ô∏è Drug Types: High Alert, Narcotic, Controlled, Psychotropic, Refer, Dangerous");
    console.log("‚ùÑÔ∏è Storage Conditions: Room Temp, Refrigerated, Frozen, Dry, Dark, Controlled");
    
    console.log("\nüè¢ Departments & Warehouses:");
    console.log("üè• Departments: Pharmacy, Emergency, ICU, OR, OPD, IPD");
    console.log("üè™ Warehouses: Central, Emergency, Controlled, Cold Storage");
    
    console.log("\nüìù Next steps:");
    console.log("1. Run: pnpm dev");
    console.log("2. Login as dev@system.local / dev123");
    console.log("3. Test Admin Panel at /admin");
    console.log("4. Director can approve pending users");
    console.log("5. Group Head can manage drug master data");
    console.log("6. Start building API endpoints");

  } catch (error) {
    console.error("‚ùå Seed error:", error);
    throw error;
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("‚úÖ Database connection closed");
  })
  .catch(async (e) => {
    console.error("‚ùå Fatal seed error:", e);
    await prisma.$disconnect();
    process.exit(1);
  });
