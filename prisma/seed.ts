// prisma/seed.ts - Auto-generated Modular Seed File
// Generated by scripts/merge-seeds.js
// Do not edit manually - modify individual seed files instead

import { PrismaClient } from "@prisma/client";
import { hashPassword } from "../lib/password-utils";

import { seedHospitals } from "./seeds/hospitals.seed";
import { seedPersonnelTypes } from "./seeds/personnel-types.seed";
import { seedDepartments } from "./seeds/departments.seed";
import { seedUsers } from "./seeds/users.seed";
import { seedMasterData } from "./seeds/master-data.seed";
import { seedRealDrugs } from "./seeds/real-drugs.seed";
import { seedDemoData } from "./seeds/demo-data.seed";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Starting Enhanced Hospital Pharmacy Stock Management System Seed...");
  console.log("üéØ Using Modular Seed Architecture with Neon + Prisma");

  try {
    // ================================
    // PHASE 1: FOUNDATION
    // ================================
    console.log("\nüèóÔ∏è  PHASE 1: Foundation Setup");
    
    // 1. Create hospitals first
    const hospitals = await seedHospitals(prisma, null);
    console.log(`‚úÖ Created ${hospitals.length} hospitals`);

    // 2. Create system developer with first hospital
    console.log("üë§ Creating system developer user...");
    const hashedDevPassword = await hashPassword("dev123");
    const devUser = await prisma.user.upsert({
      where: { email: "dev@system.local" },
      update: {},
      create: {
        email: "dev@system.local",
        username: "developer",
        name: "System Developer",
        firstName: "System",
        lastName: "Developer", 
        phoneNumber: "0800000000",
        employeeId: "DEV001",
        position: "System Developer",
        role: "DEVELOPER",
        status: "ACTIVE",
        hospitalId: hospitals[0].id, // Use first hospital
        personnelTypeId: undefined, // Will be updated after personnel type creation
        isProfileComplete: true,
        emailVerified: true,
        password: hashedDevPassword,
      },
    });
    console.log("‚úÖ System developer created");

    // ================================
    // PHASE 2: ORGANIZATIONAL STRUCTURE
    // ================================
    console.log("\nüè¢ PHASE 2: Organizational Structure");
    
    // 3. Create personnel types for all hospitals
    const personnelTypes = await seedPersonnelTypes(prisma, hospitals, devUser);
    console.log(`‚úÖ Created personnel types for all hospitals`);

    // Update dev user with developer personnel type
    const devPersonnelType = personnelTypes[hospitals[0].id].find(pt => pt.typeCode === "DEV");
    await prisma.user.update({
      where: { id: devUser.id },
      data: { personnelTypeId: devPersonnelType?.id }
    });

    // 4. Create departments for all hospitals
    const departments = await seedDepartments(prisma, hospitals);
    console.log(`‚úÖ Created departments for all hospitals`);

    // ================================
    // PHASE 3: PERSONNEL
    // ================================
    console.log("\nüë• PHASE 3: Personnel Management");
    
    // 5. Create diverse users with proper role assignments
    const users = await seedUsers(prisma, hospitals, departments, personnelTypes);
    console.log(`‚úÖ Created ${users.length} users with role assignments`);

    // ================================
    // PHASE 4: MASTER DATA
    // ================================
    console.log("\nüíä PHASE 4: Master Data Setup");
    
    // 6. Create master data (drug forms, groups, types, etc.)
    const masterData = await seedMasterData(prisma, hospitals, devUser);
    console.log(`‚úÖ Created master data for all hospitals`);

    // ================================
    // PHASE 5: REAL DRUG DATA
    // ================================
    console.log("\nüíä PHASE 5: Real Drug Data");
    
    // 6. Create real drug data for Hospital 1
    const realDrugs = await seedRealDrugs(prisma, hospitals, masterData);
    console.log(`‚úÖ Created real drug data for ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏•‡∏≥‡∏õ‡∏≤‡∏á`);

    // ================================
    // PHASE 6: DEMO DATA (Optional)
    // ================================
    console.log("\nüéÆ PHASE 6: Demo Data (Optional)");
    
    if (process.env.SEED_DEMO_DATA === "true") {
      const demoData = await seedDemoData(prisma, hospitals, users, masterData);
      console.log(`‚úÖ Created demo data for testing`);
    } else {
      console.log("‚è≠Ô∏è  Skipping demo data (set SEED_DEMO_DATA=true to include)");
    }

    // ================================
    // COMPLETION SUMMARY
    // ================================
    console.log("\nüéâ Enhanced Hospital Pharmacy Seed Completed Successfully!");
    console.log("\nüìä Summary:");
    console.log(`üè• Hospitals: ${hospitals.length}`);
    console.log(`üë• Personnel Types: ${Object.values(personnelTypes).flat().length}`);
    console.log(`üè¢ Departments: ${Object.values(departments).flat().length}`);
    console.log(`üë§ Users: ${users.length + 1} (including dev user)`);
    console.log(`üíä Master Data Categories: ${Object.keys(masterData).length}`);
    console.log(`üè• Real Drugs (‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏•‡∏≥‡∏õ‡∏≤‡∏á): ${realDrugs.length}`);
    
    console.log("\nüîë System Access:");
    console.log("üîß DEVELOPER: dev@system.local / dev123");
    console.log("üë®‚Äçüíº DIRECTORS: director@[hospital].go.th / director123");
    console.log("‚öïÔ∏è  PHARMACY: pharm@[hospital].go.th / pharm123");
    console.log("üë©‚Äç‚öïÔ∏è NURSING: nurse@[hospital].go.th / nurse123");
    
    console.log("\nüìù Next Steps:");
    console.log("1. Run: pnpm dev");
    console.log("2. Login as dev@system.local / dev123");
    console.log("3. Test multi-tenant isolation");
    console.log("4. Verify role-based permissions");
    console.log("5. Approve pending users if any");

  } catch (error) {
    console.error("‚ùå Seed error:", error);
    throw error;
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("‚úÖ Database connection closed successfully");
  })
  .catch(async (e) => {
    console.error("‚ùå Fatal seed error:", e);
    await prisma.$disconnect();
    process.exit(1);
  });

export { prisma };